
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004354  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004460  08004460  00014460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004544  08004544  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08004544  08004544  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004544  08004544  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004544  08004544  00014544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800454c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000009c  080045e8  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  080045e8  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c618  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026d7  00000000  00000000  0002c720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  0002edf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b2a  00000000  00000000  0002fc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019015  00000000  00000000  000307a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012592  00000000  00000000  000497b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b2e9  00000000  00000000  0005bd49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fbc  00000000  00000000  000e7034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000eaff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004448 	.word	0x08004448

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	08004448 	.word	0x08004448

0800014c <mode_press_handler>:

static uint8_t btn_mode_state = BUTTON_RELEASED;
uint8_t time[3] = {3, 7, 10}; // AMBER, GREEN, RED

static void mode_press_handler(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    if (!is_button_pressed(MODE_BUTTON) && btn_mode_state == BUTTON_PRESSED)
 8000150:	2000      	movs	r0, #0
 8000152:	f000 fc7d 	bl	8000a50 <is_button_pressed>
 8000156:	4603      	mov	r3, r0
 8000158:	2b00      	cmp	r3, #0
 800015a:	d126      	bne.n	80001aa <mode_press_handler+0x5e>
 800015c:	4b14      	ldr	r3, [pc, #80]	; (80001b0 <mode_press_handler+0x64>)
 800015e:	781b      	ldrb	r3, [r3, #0]
 8000160:	2b00      	cmp	r3, #0
 8000162:	d122      	bne.n	80001aa <mode_press_handler+0x5e>
    {
        btn_mode_state = BUTTON_RELEASED;
 8000164:	4b12      	ldr	r3, [pc, #72]	; (80001b0 <mode_press_handler+0x64>)
 8000166:	2201      	movs	r2, #1
 8000168:	701a      	strb	r2, [r3, #0]

        switch (fsm_state)
 800016a:	4b12      	ldr	r3, [pc, #72]	; (80001b4 <mode_press_handler+0x68>)
 800016c:	781b      	ldrb	r3, [r3, #0]
 800016e:	2b02      	cmp	r3, #2
 8000170:	d012      	beq.n	8000198 <mode_press_handler+0x4c>
 8000172:	2b02      	cmp	r3, #2
 8000174:	dc18      	bgt.n	80001a8 <mode_press_handler+0x5c>
 8000176:	2b00      	cmp	r3, #0
 8000178:	d002      	beq.n	8000180 <mode_press_handler+0x34>
 800017a:	2b01      	cmp	r3, #1
 800017c:	d006      	beq.n	800018c <mode_press_handler+0x40>
            save_time();
            automatic_init();
            fsm_state = AUTO;
            break;
        default:
            break;
 800017e:	e013      	b.n	80001a8 <mode_press_handler+0x5c>
            manual_init();
 8000180:	f000 fa32 	bl	80005e8 <manual_init>
            fsm_state = MANUAL;
 8000184:	4b0b      	ldr	r3, [pc, #44]	; (80001b4 <mode_press_handler+0x68>)
 8000186:	2201      	movs	r2, #1
 8000188:	701a      	strb	r2, [r3, #0]
            break;
 800018a:	e00e      	b.n	80001aa <mode_press_handler+0x5e>
            tuning_init();
 800018c:	f000 fb48 	bl	8000820 <tuning_init>
            fsm_state = TUNING;
 8000190:	4b08      	ldr	r3, [pc, #32]	; (80001b4 <mode_press_handler+0x68>)
 8000192:	2202      	movs	r2, #2
 8000194:	701a      	strb	r2, [r3, #0]
            break;
 8000196:	e008      	b.n	80001aa <mode_press_handler+0x5e>
            save_time();
 8000198:	f000 fab8 	bl	800070c <save_time>
            automatic_init();
 800019c:	f000 f870 	bl	8000280 <automatic_init>
            fsm_state = AUTO;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <mode_press_handler+0x68>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	701a      	strb	r2, [r3, #0]
            break;
 80001a6:	e000      	b.n	80001aa <mode_press_handler+0x5e>
            break;
 80001a8:	bf00      	nop
        }
    }
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000000 	.word	0x20000000
 80001b4:	200000b8 	.word	0x200000b8

080001b8 <fsm_init>:

void fsm_init(void)
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
    // Initialize the FSM
    fsm_state = INIT_FSM;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <fsm_init+0x14>)
 80001be:	2203      	movs	r2, #3
 80001c0:	701a      	strb	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	200000b8 	.word	0x200000b8

080001d0 <fsm_run>:

void fsm_run(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
    if (is_button_pressed(MODE_BUTTON))
 80001d4:	2000      	movs	r0, #0
 80001d6:	f000 fc3b 	bl	8000a50 <is_button_pressed>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d002      	beq.n	80001e6 <fsm_run+0x16>
    {
        btn_mode_state = BUTTON_PRESSED;
 80001e0:	4b17      	ldr	r3, [pc, #92]	; (8000240 <fsm_run+0x70>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	701a      	strb	r2, [r3, #0]
    }
    // Run the FSM
    switch (fsm_state)
 80001e6:	4b17      	ldr	r3, [pc, #92]	; (8000244 <fsm_run+0x74>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	2b03      	cmp	r3, #3
 80001ec:	d822      	bhi.n	8000234 <fsm_run+0x64>
 80001ee:	a201      	add	r2, pc, #4	; (adr r2, 80001f4 <fsm_run+0x24>)
 80001f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f4:	08000211 	.word	0x08000211
 80001f8:	0800021d 	.word	0x0800021d
 80001fc:	08000229 	.word	0x08000229
 8000200:	08000205 	.word	0x08000205
    {
    case INIT_FSM:
        if (1)
        {
            fsm_state = AUTO;
 8000204:	4b0f      	ldr	r3, [pc, #60]	; (8000244 <fsm_run+0x74>)
 8000206:	2200      	movs	r2, #0
 8000208:	701a      	strb	r2, [r3, #0]
            automatic_init();
 800020a:	f000 f839 	bl	8000280 <automatic_init>
        }
        break;
 800020e:	e012      	b.n	8000236 <fsm_run+0x66>
    case AUTO:
        automatic_run();
 8000210:	f000 f8ec 	bl	80003ec <automatic_run>
        automatic_generate_lcd_data(lcd_data);
 8000214:	480c      	ldr	r0, [pc, #48]	; (8000248 <fsm_run+0x78>)
 8000216:	f000 f8bf 	bl	8000398 <automatic_generate_lcd_data>
        break;
 800021a:	e00c      	b.n	8000236 <fsm_run+0x66>
    case MANUAL:
        manual_run();
 800021c:	f000 fa30 	bl	8000680 <manual_run>
        manual_generate_lcd_data(lcd_data);
 8000220:	4809      	ldr	r0, [pc, #36]	; (8000248 <fsm_run+0x78>)
 8000222:	f000 f9f1 	bl	8000608 <manual_generate_lcd_data>
        break;
 8000226:	e006      	b.n	8000236 <fsm_run+0x66>
    case TUNING:
        tuning_run();
 8000228:	f000 fb06 	bl	8000838 <tuning_run>
        tuning_generate_lcd_data(lcd_data);
 800022c:	4806      	ldr	r0, [pc, #24]	; (8000248 <fsm_run+0x78>)
 800022e:	f000 fb6d 	bl	800090c <tuning_generate_lcd_data>
        break;
 8000232:	e000      	b.n	8000236 <fsm_run+0x66>
    default:
        break;
 8000234:	bf00      	nop
    }
    mode_press_handler();
 8000236:	f7ff ff89 	bl	800014c <mode_press_handler>
}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	20000000 	.word	0x20000000
 8000244:	200000b8 	.word	0x200000b8
 8000248:	200000bc 	.word	0x200000bc

0800024c <timeout_handler>:

void timeout_handler(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
    if (fsm_state == TUNING && isTimerExpired(TUNING_TIMER))
 8000250:	4b0a      	ldr	r3, [pc, #40]	; (800027c <timeout_handler+0x30>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b02      	cmp	r3, #2
 8000256:	d10e      	bne.n	8000276 <timeout_handler+0x2a>
 8000258:	2000      	movs	r0, #0
 800025a:	f001 fbc7 	bl	80019ec <isTimerExpired>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d008      	beq.n	8000276 <timeout_handler+0x2a>
    {
        light_off_all();
 8000264:	f000 feba 	bl	8000fdc <light_off_all>
        save_time();
 8000268:	f000 fa50 	bl	800070c <save_time>
        automatic_init();
 800026c:	f000 f808 	bl	8000280 <automatic_init>
        fsm_state = AUTO;
 8000270:	4b02      	ldr	r3, [pc, #8]	; (800027c <timeout_handler+0x30>)
 8000272:	2200      	movs	r2, #0
 8000274:	701a      	strb	r2, [r3, #0]
    }
}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	200000b8 	.word	0x200000b8

08000280 <automatic_init>:
static uint8_t auto_time[2][3] = { { 0 }, { 0 } };
static uint8_t color_flag_1 = 0;
static uint8_t color_flag_2 = 0;

void automatic_init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	light_1 = INIT_AUTO;
 8000284:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <automatic_init+0x48>)
 8000286:	2203      	movs	r2, #3
 8000288:	701a      	strb	r2, [r3, #0]
	light_2 = INIT_AUTO;
 800028a:	4b10      	ldr	r3, [pc, #64]	; (80002cc <automatic_init+0x4c>)
 800028c:	2203      	movs	r2, #3
 800028e:	701a      	strb	r2, [r3, #0]
	auto_time[0][RED_AUTO] = time[RED_AUTO];
 8000290:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <automatic_init+0x50>)
 8000292:	789a      	ldrb	r2, [r3, #2]
 8000294:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <automatic_init+0x54>)
 8000296:	709a      	strb	r2, [r3, #2]
	auto_time[0][GREEN_AUTO] = time[GREEN_AUTO];
 8000298:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <automatic_init+0x50>)
 800029a:	785a      	ldrb	r2, [r3, #1]
 800029c:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <automatic_init+0x54>)
 800029e:	705a      	strb	r2, [r3, #1]
	auto_time[0][AMBER_AUTO] = time[AMBER_AUTO];
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <automatic_init+0x50>)
 80002a2:	781a      	ldrb	r2, [r3, #0]
 80002a4:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <automatic_init+0x54>)
 80002a6:	701a      	strb	r2, [r3, #0]
	auto_time[1][RED_AUTO] = time[RED_AUTO];
 80002a8:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <automatic_init+0x50>)
 80002aa:	789a      	ldrb	r2, [r3, #2]
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <automatic_init+0x54>)
 80002ae:	715a      	strb	r2, [r3, #5]
	auto_time[1][GREEN_AUTO] = time[GREEN_AUTO];
 80002b0:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <automatic_init+0x50>)
 80002b2:	785a      	ldrb	r2, [r3, #1]
 80002b4:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <automatic_init+0x54>)
 80002b6:	711a      	strb	r2, [r3, #4]
	auto_time[1][AMBER_AUTO] = time[AMBER_AUTO];
 80002b8:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <automatic_init+0x50>)
 80002ba:	781a      	ldrb	r2, [r3, #0]
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <automatic_init+0x54>)
 80002be:	70da      	strb	r2, [r3, #3]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	200000c0 	.word	0x200000c0
 80002cc:	200000c1 	.word	0x200000c1
 80002d0:	20000004 	.word	0x20000004
 80002d4:	200000c4 	.word	0x200000c4

080002d8 <count_down>:

static void count_down()
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	if (isTimerExpired(LIGHT_TIMER))
 80002dc:	2000      	movs	r0, #0
 80002de:	f001 fb85 	bl	80019ec <isTimerExpired>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d048      	beq.n	800037a <count_down+0xa2>
	{
		auto_time[0][light_1]--;
 80002e8:	4b25      	ldr	r3, [pc, #148]	; (8000380 <count_down+0xa8>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	4a25      	ldr	r2, [pc, #148]	; (8000384 <count_down+0xac>)
 80002ee:	5cd2      	ldrb	r2, [r2, r3]
 80002f0:	3a01      	subs	r2, #1
 80002f2:	b2d1      	uxtb	r1, r2
 80002f4:	4a23      	ldr	r2, [pc, #140]	; (8000384 <count_down+0xac>)
 80002f6:	54d1      	strb	r1, [r2, r3]
		auto_time[1][light_2]--;
 80002f8:	4b23      	ldr	r3, [pc, #140]	; (8000388 <count_down+0xb0>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	4a21      	ldr	r2, [pc, #132]	; (8000384 <count_down+0xac>)
 80002fe:	441a      	add	r2, r3
 8000300:	78d2      	ldrb	r2, [r2, #3]
 8000302:	3a01      	subs	r2, #1
 8000304:	b2d1      	uxtb	r1, r2
 8000306:	4a1f      	ldr	r2, [pc, #124]	; (8000384 <count_down+0xac>)
 8000308:	4413      	add	r3, r2
 800030a:	460a      	mov	r2, r1
 800030c:	70da      	strb	r2, [r3, #3]
		if (auto_time[0][light_1] <= 0)
 800030e:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <count_down+0xa8>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	461a      	mov	r2, r3
 8000314:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <count_down+0xac>)
 8000316:	5c9b      	ldrb	r3, [r3, r2]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d110      	bne.n	800033e <count_down+0x66>
		{
			auto_time[0][light_1] = time[light_1];
 800031c:	4b18      	ldr	r3, [pc, #96]	; (8000380 <count_down+0xa8>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	4619      	mov	r1, r3
 8000322:	4b17      	ldr	r3, [pc, #92]	; (8000380 <count_down+0xa8>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	461a      	mov	r2, r3
 8000328:	4b18      	ldr	r3, [pc, #96]	; (800038c <count_down+0xb4>)
 800032a:	5c59      	ldrb	r1, [r3, r1]
 800032c:	4b15      	ldr	r3, [pc, #84]	; (8000384 <count_down+0xac>)
 800032e:	5499      	strb	r1, [r3, r2]
			if (color_flag_1 <= 0)
 8000330:	4b17      	ldr	r3, [pc, #92]	; (8000390 <count_down+0xb8>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d102      	bne.n	800033e <count_down+0x66>
				color_flag_1 = 1;
 8000338:	4b15      	ldr	r3, [pc, #84]	; (8000390 <count_down+0xb8>)
 800033a:	2201      	movs	r2, #1
 800033c:	701a      	strb	r2, [r3, #0]
		}
		if (auto_time[1][light_2] <= 0)
 800033e:	4b12      	ldr	r3, [pc, #72]	; (8000388 <count_down+0xb0>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	461a      	mov	r2, r3
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <count_down+0xac>)
 8000346:	4413      	add	r3, r2
 8000348:	78db      	ldrb	r3, [r3, #3]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d111      	bne.n	8000372 <count_down+0x9a>
		{
			auto_time[1][light_2] = time[light_2];
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <count_down+0xb0>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	461a      	mov	r2, r3
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <count_down+0xb0>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	4619      	mov	r1, r3
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <count_down+0xb4>)
 800035c:	5c9a      	ldrb	r2, [r3, r2]
 800035e:	4b09      	ldr	r3, [pc, #36]	; (8000384 <count_down+0xac>)
 8000360:	440b      	add	r3, r1
 8000362:	70da      	strb	r2, [r3, #3]
			if (color_flag_2 <= 0)
 8000364:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <count_down+0xbc>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d102      	bne.n	8000372 <count_down+0x9a>
				color_flag_2 = 1;
 800036c:	4b09      	ldr	r3, [pc, #36]	; (8000394 <count_down+0xbc>)
 800036e:	2201      	movs	r2, #1
 8000370:	701a      	strb	r2, [r3, #0]
		}
		setTimer(LIGHT_TIMER, 100);
 8000372:	2164      	movs	r1, #100	; 0x64
 8000374:	2000      	movs	r0, #0
 8000376:	f001 fb05 	bl	8001984 <setTimer>
	}
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	200000c0 	.word	0x200000c0
 8000384:	200000c4 	.word	0x200000c4
 8000388:	200000c1 	.word	0x200000c1
 800038c:	20000004 	.word	0x20000004
 8000390:	200000ca 	.word	0x200000ca
 8000394:	200000cb 	.word	0x200000cb

08000398 <automatic_generate_lcd_data>:

void automatic_generate_lcd_data(uint8_t * data)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	data[0] = light_1;
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <automatic_generate_lcd_data+0x48>)
 80003a2:	781a      	ldrb	r2, [r3, #0]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	701a      	strb	r2, [r3, #0]
	data[1] = light_2;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3301      	adds	r3, #1
 80003ac:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <automatic_generate_lcd_data+0x4c>)
 80003ae:	7812      	ldrb	r2, [r2, #0]
 80003b0:	701a      	strb	r2, [r3, #0]
	data[2] = auto_time[0][light_1];
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <automatic_generate_lcd_data+0x48>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	4619      	mov	r1, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3302      	adds	r3, #2
 80003bc:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <automatic_generate_lcd_data+0x50>)
 80003be:	5c52      	ldrb	r2, [r2, r1]
 80003c0:	701a      	strb	r2, [r3, #0]
	data[3] = auto_time[1][light_2];
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <automatic_generate_lcd_data+0x4c>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	4619      	mov	r1, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	3303      	adds	r3, #3
 80003cc:	4a06      	ldr	r2, [pc, #24]	; (80003e8 <automatic_generate_lcd_data+0x50>)
 80003ce:	440a      	add	r2, r1
 80003d0:	78d2      	ldrb	r2, [r2, #3]
 80003d2:	701a      	strb	r2, [r3, #0]
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	200000c0 	.word	0x200000c0
 80003e4:	200000c1 	.word	0x200000c1
 80003e8:	200000c4 	.word	0x200000c4

080003ec <automatic_run>:

void automatic_run(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	switch (light_1)
 80003f0:	4b5e      	ldr	r3, [pc, #376]	; (800056c <automatic_run+0x180>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b03      	cmp	r3, #3
 80003f6:	d851      	bhi.n	800049c <automatic_run+0xb0>
 80003f8:	a201      	add	r2, pc, #4	; (adr r2, 8000400 <automatic_run+0x14>)
 80003fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003fe:	bf00      	nop
 8000400:	0800042b 	.word	0x0800042b
 8000404:	08000451 	.word	0x08000451
 8000408:	08000477 	.word	0x08000477
 800040c:	08000411 	.word	0x08000411
	{
	case INIT_AUTO:
		if (1)
		{
			light_1 = RED_AUTO;
 8000410:	4b56      	ldr	r3, [pc, #344]	; (800056c <automatic_run+0x180>)
 8000412:	2202      	movs	r2, #2
 8000414:	701a      	strb	r2, [r3, #0]
			setTimer(LIGHT_TIMER, 100);
 8000416:	2164      	movs	r1, #100	; 0x64
 8000418:	2000      	movs	r0, #0
 800041a:	f001 fab3 	bl	8001984 <setTimer>
			light_1_handle(light_1);
 800041e:	4b53      	ldr	r3, [pc, #332]	; (800056c <automatic_run+0x180>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	4618      	mov	r0, r3
 8000424:	f000 fe22 	bl	800106c <light_1_handle>
		}
		break;
 8000428:	e03f      	b.n	80004aa <automatic_run+0xbe>
	case AMBER_AUTO:
		if (color_flag_1 > 0)
 800042a:	4b51      	ldr	r3, [pc, #324]	; (8000570 <automatic_run+0x184>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d036      	beq.n	80004a0 <automatic_run+0xb4>
		{
			light_1 = RED_AUTO;
 8000432:	4b4e      	ldr	r3, [pc, #312]	; (800056c <automatic_run+0x180>)
 8000434:	2202      	movs	r2, #2
 8000436:	701a      	strb	r2, [r3, #0]
			light_1_handle(light_1);
 8000438:	4b4c      	ldr	r3, [pc, #304]	; (800056c <automatic_run+0x180>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	4618      	mov	r0, r3
 800043e:	f000 fe15 	bl	800106c <light_1_handle>
			color_flag_1--;
 8000442:	4b4b      	ldr	r3, [pc, #300]	; (8000570 <automatic_run+0x184>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	3b01      	subs	r3, #1
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4b49      	ldr	r3, [pc, #292]	; (8000570 <automatic_run+0x184>)
 800044c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800044e:	e027      	b.n	80004a0 <automatic_run+0xb4>
	case GREEN_AUTO:
		if (color_flag_1 > 0)
 8000450:	4b47      	ldr	r3, [pc, #284]	; (8000570 <automatic_run+0x184>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d025      	beq.n	80004a4 <automatic_run+0xb8>
		{
			light_1 = AMBER_AUTO;
 8000458:	4b44      	ldr	r3, [pc, #272]	; (800056c <automatic_run+0x180>)
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]
			light_1_handle(light_1);
 800045e:	4b43      	ldr	r3, [pc, #268]	; (800056c <automatic_run+0x180>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	4618      	mov	r0, r3
 8000464:	f000 fe02 	bl	800106c <light_1_handle>
			color_flag_1--;
 8000468:	4b41      	ldr	r3, [pc, #260]	; (8000570 <automatic_run+0x184>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	3b01      	subs	r3, #1
 800046e:	b2da      	uxtb	r2, r3
 8000470:	4b3f      	ldr	r3, [pc, #252]	; (8000570 <automatic_run+0x184>)
 8000472:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000474:	e016      	b.n	80004a4 <automatic_run+0xb8>
	case RED_AUTO:
		if (color_flag_1 > 0)
 8000476:	4b3e      	ldr	r3, [pc, #248]	; (8000570 <automatic_run+0x184>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d014      	beq.n	80004a8 <automatic_run+0xbc>
		{
			light_1 = GREEN_AUTO;
 800047e:	4b3b      	ldr	r3, [pc, #236]	; (800056c <automatic_run+0x180>)
 8000480:	2201      	movs	r2, #1
 8000482:	701a      	strb	r2, [r3, #0]
			light_1_handle(light_1);
 8000484:	4b39      	ldr	r3, [pc, #228]	; (800056c <automatic_run+0x180>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	4618      	mov	r0, r3
 800048a:	f000 fdef 	bl	800106c <light_1_handle>
			color_flag_1--;
 800048e:	4b38      	ldr	r3, [pc, #224]	; (8000570 <automatic_run+0x184>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	3b01      	subs	r3, #1
 8000494:	b2da      	uxtb	r2, r3
 8000496:	4b36      	ldr	r3, [pc, #216]	; (8000570 <automatic_run+0x184>)
 8000498:	701a      	strb	r2, [r3, #0]
		}
		break;
 800049a:	e005      	b.n	80004a8 <automatic_run+0xbc>
	default:
		break;
 800049c:	bf00      	nop
 800049e:	e004      	b.n	80004aa <automatic_run+0xbe>
		break;
 80004a0:	bf00      	nop
 80004a2:	e002      	b.n	80004aa <automatic_run+0xbe>
		break;
 80004a4:	bf00      	nop
 80004a6:	e000      	b.n	80004aa <automatic_run+0xbe>
		break;
 80004a8:	bf00      	nop
	}

	switch (light_2)
 80004aa:	4b32      	ldr	r3, [pc, #200]	; (8000574 <automatic_run+0x188>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b03      	cmp	r3, #3
 80004b0:	d850      	bhi.n	8000554 <automatic_run+0x168>
 80004b2:	a201      	add	r2, pc, #4	; (adr r2, 80004b8 <automatic_run+0xcc>)
 80004b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b8:	080004e3 	.word	0x080004e3
 80004bc:	08000509 	.word	0x08000509
 80004c0:	0800052f 	.word	0x0800052f
 80004c4:	080004c9 	.word	0x080004c9
	{
	case INIT_AUTO:
		if (1)
		{
			light_2 = GREEN_AUTO;
 80004c8:	4b2a      	ldr	r3, [pc, #168]	; (8000574 <automatic_run+0x188>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	701a      	strb	r2, [r3, #0]
			setTimer(LIGHT_TIMER, 100);
 80004ce:	2164      	movs	r1, #100	; 0x64
 80004d0:	2000      	movs	r0, #0
 80004d2:	f001 fa57 	bl	8001984 <setTimer>
			light_2_handle(light_2);
 80004d6:	4b27      	ldr	r3, [pc, #156]	; (8000574 <automatic_run+0x188>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 fde9 	bl	80010b2 <light_2_handle>
		}
		break;
 80004e0:	e03f      	b.n	8000562 <automatic_run+0x176>
	case AMBER_AUTO:
		if (color_flag_2 > 0)
 80004e2:	4b25      	ldr	r3, [pc, #148]	; (8000578 <automatic_run+0x18c>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d036      	beq.n	8000558 <automatic_run+0x16c>
		{
			light_2 = RED_AUTO;
 80004ea:	4b22      	ldr	r3, [pc, #136]	; (8000574 <automatic_run+0x188>)
 80004ec:	2202      	movs	r2, #2
 80004ee:	701a      	strb	r2, [r3, #0]
			light_2_handle(light_2);
 80004f0:	4b20      	ldr	r3, [pc, #128]	; (8000574 <automatic_run+0x188>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 fddc 	bl	80010b2 <light_2_handle>
			color_flag_2--;
 80004fa:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <automatic_run+0x18c>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	3b01      	subs	r3, #1
 8000500:	b2da      	uxtb	r2, r3
 8000502:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <automatic_run+0x18c>)
 8000504:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000506:	e027      	b.n	8000558 <automatic_run+0x16c>
	case GREEN_AUTO:
		if (color_flag_2 > 0)
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <automatic_run+0x18c>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d025      	beq.n	800055c <automatic_run+0x170>
		{
			light_2 = AMBER_AUTO;
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <automatic_run+0x188>)
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]
			light_2_handle(light_2);
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <automatic_run+0x188>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	4618      	mov	r0, r3
 800051c:	f000 fdc9 	bl	80010b2 <light_2_handle>
			color_flag_2--;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <automatic_run+0x18c>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	3b01      	subs	r3, #1
 8000526:	b2da      	uxtb	r2, r3
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <automatic_run+0x18c>)
 800052a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800052c:	e016      	b.n	800055c <automatic_run+0x170>
	case RED_AUTO:
		if (color_flag_2 > 0)
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <automatic_run+0x18c>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d014      	beq.n	8000560 <automatic_run+0x174>
		{
			light_2 = GREEN_AUTO;
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <automatic_run+0x188>)
 8000538:	2201      	movs	r2, #1
 800053a:	701a      	strb	r2, [r3, #0]
			light_2_handle(light_2);
 800053c:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <automatic_run+0x188>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4618      	mov	r0, r3
 8000542:	f000 fdb6 	bl	80010b2 <light_2_handle>
			color_flag_2--;
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <automatic_run+0x18c>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	3b01      	subs	r3, #1
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <automatic_run+0x18c>)
 8000550:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000552:	e005      	b.n	8000560 <automatic_run+0x174>
	default:
		break;
 8000554:	bf00      	nop
 8000556:	e004      	b.n	8000562 <automatic_run+0x176>
		break;
 8000558:	bf00      	nop
 800055a:	e002      	b.n	8000562 <automatic_run+0x176>
		break;
 800055c:	bf00      	nop
 800055e:	e000      	b.n	8000562 <automatic_run+0x176>
		break;
 8000560:	bf00      	nop
	}
	count_down();
 8000562:	f7ff feb9 	bl	80002d8 <count_down>
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200000c0 	.word	0x200000c0
 8000570:	200000ca 	.word	0x200000ca
 8000574:	200000c1 	.word	0x200000c1
 8000578:	200000cb 	.word	0x200000cb

0800057c <color_press_handler>:

static manual_state_t manual_state;
static uint8_t btn_manual_state = BUTTON_RELEASED;

void static color_press_handler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
    if (!is_button_pressed(COLOR_BUTTON) && btn_manual_state == BUTTON_PRESSED)
 8000580:	2001      	movs	r0, #1
 8000582:	f000 fa65 	bl	8000a50 <is_button_pressed>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d126      	bne.n	80005da <color_press_handler+0x5e>
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <color_press_handler+0x64>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d122      	bne.n	80005da <color_press_handler+0x5e>
    {
        btn_manual_state = BUTTON_RELEASED;
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <color_press_handler+0x64>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]

        switch (manual_state)
 800059a:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <color_press_handler+0x68>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b03      	cmp	r3, #3
 80005a0:	d81a      	bhi.n	80005d8 <color_press_handler+0x5c>
 80005a2:	a201      	add	r2, pc, #4	; (adr r2, 80005a8 <color_press_handler+0x2c>)
 80005a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a8:	080005b9 	.word	0x080005b9
 80005ac:	080005c1 	.word	0x080005c1
 80005b0:	080005c9 	.word	0x080005c9
 80005b4:	080005d1 	.word	0x080005d1
        {
        case RED_GREEN_MANUAL:
            manual_state = RED_AMBER_MANUAL;
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <color_press_handler+0x68>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
            break;
 80005be:	e00c      	b.n	80005da <color_press_handler+0x5e>
        case RED_AMBER_MANUAL:
            manual_state = GREEN_RED_MANUAL;
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <color_press_handler+0x68>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
            break;
 80005c6:	e008      	b.n	80005da <color_press_handler+0x5e>
        case GREEN_RED_MANUAL:
            manual_state = AMBER_RED_MANUAL;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <color_press_handler+0x68>)
 80005ca:	2203      	movs	r2, #3
 80005cc:	701a      	strb	r2, [r3, #0]
            break;
 80005ce:	e004      	b.n	80005da <color_press_handler+0x5e>
        case AMBER_RED_MANUAL:
            manual_state = RED_GREEN_MANUAL;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <color_press_handler+0x68>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
            break;
 80005d6:	e000      	b.n	80005da <color_press_handler+0x5e>
        default:
            break;
 80005d8:	bf00      	nop
        }
    }
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000007 	.word	0x20000007
 80005e4:	200000cc 	.word	0x200000cc

080005e8 <manual_init>:

void manual_init(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
    // Initialize the manual FSM
    btn_manual_state = BUTTON_RELEASED;
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <manual_init+0x18>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
    manual_state = INIT_MANUAL;
 80005f2:	4b04      	ldr	r3, [pc, #16]	; (8000604 <manual_init+0x1c>)
 80005f4:	2204      	movs	r2, #4
 80005f6:	701a      	strb	r2, [r3, #0]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	20000007 	.word	0x20000007
 8000604:	200000cc 	.word	0x200000cc

08000608 <manual_generate_lcd_data>:

void manual_generate_lcd_data(uint8_t * data)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
    switch (manual_state)
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <manual_generate_lcd_data+0x74>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b03      	cmp	r3, #3
 8000616:	d82b      	bhi.n	8000670 <manual_generate_lcd_data+0x68>
 8000618:	a201      	add	r2, pc, #4	; (adr r2, 8000620 <manual_generate_lcd_data+0x18>)
 800061a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061e:	bf00      	nop
 8000620:	08000631 	.word	0x08000631
 8000624:	08000641 	.word	0x08000641
 8000628:	08000651 	.word	0x08000651
 800062c:	08000661 	.word	0x08000661
    {
    case RED_GREEN_MANUAL:
        data[0] = RED;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2202      	movs	r2, #2
 8000634:	701a      	strb	r2, [r3, #0]
        data[1] = GREEN;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3301      	adds	r3, #1
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
        break;
 800063e:	e018      	b.n	8000672 <manual_generate_lcd_data+0x6a>
    case RED_AMBER_MANUAL:
        data[0] = RED;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2202      	movs	r2, #2
 8000644:	701a      	strb	r2, [r3, #0]
        data[1] = AMBER;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3301      	adds	r3, #1
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
        break;
 800064e:	e010      	b.n	8000672 <manual_generate_lcd_data+0x6a>
    case GREEN_RED_MANUAL:
        data[0] = GREEN;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
        data[1] = RED;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	3301      	adds	r3, #1
 800065a:	2202      	movs	r2, #2
 800065c:	701a      	strb	r2, [r3, #0]
        break;
 800065e:	e008      	b.n	8000672 <manual_generate_lcd_data+0x6a>
    case AMBER_RED_MANUAL:
        data[0] = AMBER;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
        data[1] = RED;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3301      	adds	r3, #1
 800066a:	2202      	movs	r2, #2
 800066c:	701a      	strb	r2, [r3, #0]
        break;
 800066e:	e000      	b.n	8000672 <manual_generate_lcd_data+0x6a>
    default:
        break;
 8000670:	bf00      	nop
    }
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	200000cc 	.word	0x200000cc

08000680 <manual_run>:

void manual_run(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
    if (is_button_pressed(COLOR_BUTTON))
 8000684:	2001      	movs	r0, #1
 8000686:	f000 f9e3 	bl	8000a50 <is_button_pressed>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d002      	beq.n	8000696 <manual_run+0x16>
    {
        btn_manual_state = BUTTON_PRESSED;
 8000690:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <manual_run+0x84>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
    }
    // Run the manual FSM
    switch (manual_state)
 8000696:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <manual_run+0x88>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b04      	cmp	r3, #4
 800069c:	d82c      	bhi.n	80006f8 <manual_run+0x78>
 800069e:	a201      	add	r2, pc, #4	; (adr r2, 80006a4 <manual_run+0x24>)
 80006a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a4:	080006c1 	.word	0x080006c1
 80006a8:	080006cf 	.word	0x080006cf
 80006ac:	080006dd 	.word	0x080006dd
 80006b0:	080006eb 	.word	0x080006eb
 80006b4:	080006b9 	.word	0x080006b9
    {
    case INIT_MANUAL:
        if (1)
        {
            manual_state = RED_GREEN_MANUAL;
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <manual_run+0x88>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
        }
        break;
 80006be:	e01c      	b.n	80006fa <manual_run+0x7a>
    case RED_GREEN_MANUAL:
        light_1_handle(RED);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 fcd3 	bl	800106c <light_1_handle>
        light_2_handle(GREEN);
 80006c6:	2001      	movs	r0, #1
 80006c8:	f000 fcf3 	bl	80010b2 <light_2_handle>
        break;
 80006cc:	e015      	b.n	80006fa <manual_run+0x7a>
    case RED_AMBER_MANUAL:
        light_1_handle(RED);
 80006ce:	2002      	movs	r0, #2
 80006d0:	f000 fccc 	bl	800106c <light_1_handle>
        light_2_handle(AMBER);
 80006d4:	2000      	movs	r0, #0
 80006d6:	f000 fcec 	bl	80010b2 <light_2_handle>
        break;
 80006da:	e00e      	b.n	80006fa <manual_run+0x7a>
    case GREEN_RED_MANUAL:
        light_1_handle(GREEN);
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 fcc5 	bl	800106c <light_1_handle>
        light_2_handle(RED);
 80006e2:	2002      	movs	r0, #2
 80006e4:	f000 fce5 	bl	80010b2 <light_2_handle>
        break;
 80006e8:	e007      	b.n	80006fa <manual_run+0x7a>
    case AMBER_RED_MANUAL:
        light_1_handle(AMBER);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f000 fcbe 	bl	800106c <light_1_handle>
        light_2_handle(RED);
 80006f0:	2002      	movs	r0, #2
 80006f2:	f000 fcde 	bl	80010b2 <light_2_handle>
        break;
 80006f6:	e000      	b.n	80006fa <manual_run+0x7a>
    default:
        break;
 80006f8:	bf00      	nop
    }
    color_press_handler();
 80006fa:	f7ff ff3f 	bl	800057c <color_press_handler>
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000007 	.word	0x20000007
 8000708:	200000cc 	.word	0x200000cc

0800070c <save_time>:
static tunnig_state_t tuning_state;
uint8_t btn_tuning_state = BUTTON_RELEASED;
uint8_t time_tuning[3];

void save_time()
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
    time[RED_TUNING]   =   time_tuning[RED_TUNING]; 
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <save_time+0x24>)
 8000712:	789a      	ldrb	r2, [r3, #2]
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <save_time+0x28>)
 8000716:	709a      	strb	r2, [r3, #2]
    time[GREEN_TUNING] =   time_tuning[GREEN_TUNING]; 
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <save_time+0x24>)
 800071a:	785a      	ldrb	r2, [r3, #1]
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <save_time+0x28>)
 800071e:	705a      	strb	r2, [r3, #1]
    time[AMBER_TUNING] =   time_tuning[AMBER_TUNING]; 
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <save_time+0x24>)
 8000722:	781a      	ldrb	r2, [r3, #0]
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <save_time+0x28>)
 8000726:	701a      	strb	r2, [r3, #0]
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	200000d0 	.word	0x200000d0
 8000734:	20000004 	.word	0x20000004

08000738 <color_press_handler>:

static void color_press_handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    if (!is_button_pressed(COLOR_BUTTON) && btn_tuning_state == BUTTON_PRESSED)
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f987 	bl	8000a50 <is_button_pressed>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d129      	bne.n	800079c <color_press_handler+0x64>
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <color_press_handler+0x68>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d125      	bne.n	800079c <color_press_handler+0x64>
    {
        btn_tuning_state = BUTTON_RELEASED;
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <color_press_handler+0x68>)
 8000752:	2201      	movs	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]

        switch (tuning_state)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <color_press_handler+0x6c>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b02      	cmp	r3, #2
 800075c:	d006      	beq.n	800076c <color_press_handler+0x34>
 800075e:	2b02      	cmp	r3, #2
 8000760:	dc10      	bgt.n	8000784 <color_press_handler+0x4c>
 8000762:	2b00      	cmp	r3, #0
 8000764:	d00a      	beq.n	800077c <color_press_handler+0x44>
 8000766:	2b01      	cmp	r3, #1
 8000768:	d004      	beq.n	8000774 <color_press_handler+0x3c>
            break;
        case AMBER_TUNING:
            tuning_state = RED_TUNING;
            break;
        default:
            break;
 800076a:	e00b      	b.n	8000784 <color_press_handler+0x4c>
            tuning_state = GREEN_TUNING;
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <color_press_handler+0x6c>)
 800076e:	2201      	movs	r2, #1
 8000770:	701a      	strb	r2, [r3, #0]
            break;
 8000772:	e008      	b.n	8000786 <color_press_handler+0x4e>
            tuning_state = AMBER_TUNING;
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <color_press_handler+0x6c>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
            break;
 800077a:	e004      	b.n	8000786 <color_press_handler+0x4e>
            tuning_state = RED_TUNING;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <color_press_handler+0x6c>)
 800077e:	2202      	movs	r2, #2
 8000780:	701a      	strb	r2, [r3, #0]
            break;
 8000782:	e000      	b.n	8000786 <color_press_handler+0x4e>
            break;
 8000784:	bf00      	nop
        }

		light_off_all();
 8000786:	f000 fc29 	bl	8000fdc <light_off_all>
		setTimer(TUNING_TIMER, TUNING_TIMER_OUT);
 800078a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800078e:	2000      	movs	r0, #0
 8000790:	f001 f8f8 	bl	8001984 <setTimer>
		setTimer(TOGGLE_TIMER, TOGGLE_TIME);
 8000794:	2132      	movs	r1, #50	; 0x32
 8000796:	2001      	movs	r0, #1
 8000798:	f001 f8f4 	bl	8001984 <setTimer>
    }
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000008 	.word	0x20000008
 80007a4:	200000cd 	.word	0x200000cd

080007a8 <update_light_time>:

// update the time of the light in input_reading.c
void update_light_time()
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	time_tuning[tuning_state] = (time_tuning[tuning_state] + 1) % MAX_TIME;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <update_light_time+0x40>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <update_light_time+0x44>)
 80007b4:	5c9b      	ldrb	r3, [r3, r2]
 80007b6:	3301      	adds	r3, #1
 80007b8:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <update_light_time+0x48>)
 80007ba:	fb82 1203 	smull	r1, r2, r2, r3
 80007be:	1151      	asrs	r1, r2, #5
 80007c0:	17da      	asrs	r2, r3, #31
 80007c2:	1a8a      	subs	r2, r1, r2
 80007c4:	2164      	movs	r1, #100	; 0x64
 80007c6:	fb01 f202 	mul.w	r2, r1, r2
 80007ca:	1a9a      	subs	r2, r3, r2
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <update_light_time+0x40>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	b2d2      	uxtb	r2, r2
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <update_light_time+0x44>)
 80007d6:	545a      	strb	r2, [r3, r1]
	setTimer(TUNING_TIMER, TUNING_TIMER_OUT); 
 80007d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007dc:	2000      	movs	r0, #0
 80007de:	f001 f8d1 	bl	8001984 <setTimer>
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000cd 	.word	0x200000cd
 80007ec:	200000d0 	.word	0x200000d0
 80007f0:	51eb851f 	.word	0x51eb851f

080007f4 <clone_time>:

static void clone_time()
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
    time_tuning[RED_TUNING]      = time[RED_TUNING]; 
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <clone_time+0x24>)
 80007fa:	789a      	ldrb	r2, [r3, #2]
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <clone_time+0x28>)
 80007fe:	709a      	strb	r2, [r3, #2]
    time_tuning[GREEN_TUNING]    = time[GREEN_TUNING]; 
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <clone_time+0x24>)
 8000802:	785a      	ldrb	r2, [r3, #1]
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <clone_time+0x28>)
 8000806:	705a      	strb	r2, [r3, #1]
    time_tuning[AMBER_TUNING]    = time[AMBER_TUNING]; 
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <clone_time+0x24>)
 800080a:	781a      	ldrb	r2, [r3, #0]
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <clone_time+0x28>)
 800080e:	701a      	strb	r2, [r3, #0]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	20000004 	.word	0x20000004
 800081c:	200000d0 	.word	0x200000d0

08000820 <tuning_init>:

void tuning_init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	// Initialize the automatic FSM
	clone_time();
 8000824:	f7ff ffe6 	bl	80007f4 <clone_time>
	tuning_state = INIT_TUNING;
 8000828:	4b02      	ldr	r3, [pc, #8]	; (8000834 <tuning_init+0x14>)
 800082a:	2203      	movs	r2, #3
 800082c:	701a      	strb	r2, [r3, #0]
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000cd 	.word	0x200000cd

08000838 <tuning_run>:


void tuning_run (void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	if (is_button_pressed(COLOR_BUTTON))
 800083c:	2001      	movs	r0, #1
 800083e:	f000 f907 	bl	8000a50 <is_button_pressed>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d002      	beq.n	800084e <tuning_run+0x16>
	{
		btn_tuning_state = BUTTON_PRESSED;
 8000848:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <tuning_run+0xcc>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
	}
	switch (tuning_state)
 800084e:	4b2e      	ldr	r3, [pc, #184]	; (8000908 <tuning_run+0xd0>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b03      	cmp	r3, #3
 8000854:	d84a      	bhi.n	80008ec <tuning_run+0xb4>
 8000856:	a201      	add	r2, pc, #4	; (adr r2, 800085c <tuning_run+0x24>)
 8000858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085c:	080008cd 	.word	0x080008cd
 8000860:	080008ad 	.word	0x080008ad
 8000864:	0800088d 	.word	0x0800088d
 8000868:	0800086d 	.word	0x0800086d
	{
		case INIT_TUNING:
			if (1)
			{
				tuning_state = RED_TUNING;
 800086c:	4b26      	ldr	r3, [pc, #152]	; (8000908 <tuning_run+0xd0>)
 800086e:	2202      	movs	r2, #2
 8000870:	701a      	strb	r2, [r3, #0]
				light_toggle(RED_TUNING);
 8000872:	2002      	movs	r0, #2
 8000874:	f000 fbbc 	bl	8000ff0 <light_toggle>
				setTimer(TUNING_TIMER, TUNING_TIMER_OUT);
 8000878:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800087c:	2000      	movs	r0, #0
 800087e:	f001 f881 	bl	8001984 <setTimer>
				setTimer(TOGGLE_TIMER, TOGGLE_TIME);
 8000882:	2132      	movs	r1, #50	; 0x32
 8000884:	2001      	movs	r0, #1
 8000886:	f001 f87d 	bl	8001984 <setTimer>
			}
			break;
 800088a:	e036      	b.n	80008fa <tuning_run+0xc2>
		case RED_TUNING:
			timeout_handler();
 800088c:	f7ff fcde 	bl	800024c <timeout_handler>
			if (isTimerExpired(TOGGLE_TIMER))
 8000890:	2001      	movs	r0, #1
 8000892:	f001 f8ab 	bl	80019ec <isTimerExpired>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d029      	beq.n	80008f0 <tuning_run+0xb8>
			{
				light_toggle(RED_TUNING);
 800089c:	2002      	movs	r0, #2
 800089e:	f000 fba7 	bl	8000ff0 <light_toggle>
				setTimer(TOGGLE_TIMER, TOGGLE_TIME);
 80008a2:	2132      	movs	r1, #50	; 0x32
 80008a4:	2001      	movs	r0, #1
 80008a6:	f001 f86d 	bl	8001984 <setTimer>
			}
			break;
 80008aa:	e021      	b.n	80008f0 <tuning_run+0xb8>
		case GREEN_TUNING:
			timeout_handler();
 80008ac:	f7ff fcce 	bl	800024c <timeout_handler>
			if (isTimerExpired(TOGGLE_TIMER))
 80008b0:	2001      	movs	r0, #1
 80008b2:	f001 f89b 	bl	80019ec <isTimerExpired>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d01b      	beq.n	80008f4 <tuning_run+0xbc>
			{
				light_toggle(GREEN_TUNING);
 80008bc:	2001      	movs	r0, #1
 80008be:	f000 fb97 	bl	8000ff0 <light_toggle>
				setTimer(TOGGLE_TIMER, TOGGLE_TIME);
 80008c2:	2132      	movs	r1, #50	; 0x32
 80008c4:	2001      	movs	r0, #1
 80008c6:	f001 f85d 	bl	8001984 <setTimer>
			}
			break;
 80008ca:	e013      	b.n	80008f4 <tuning_run+0xbc>
		case AMBER_TUNING:
			timeout_handler();
 80008cc:	f7ff fcbe 	bl	800024c <timeout_handler>
			if (isTimerExpired(TOGGLE_TIMER))
 80008d0:	2001      	movs	r0, #1
 80008d2:	f001 f88b 	bl	80019ec <isTimerExpired>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d00d      	beq.n	80008f8 <tuning_run+0xc0>
			{
				light_toggle(AMBER_TUNING);
 80008dc:	2000      	movs	r0, #0
 80008de:	f000 fb87 	bl	8000ff0 <light_toggle>
				setTimer(TOGGLE_TIMER, TOGGLE_TIME);
 80008e2:	2132      	movs	r1, #50	; 0x32
 80008e4:	2001      	movs	r0, #1
 80008e6:	f001 f84d 	bl	8001984 <setTimer>
			}
			break;
 80008ea:	e005      	b.n	80008f8 <tuning_run+0xc0>
		default:
			break;
 80008ec:	bf00      	nop
 80008ee:	e004      	b.n	80008fa <tuning_run+0xc2>
			break;
 80008f0:	bf00      	nop
 80008f2:	e002      	b.n	80008fa <tuning_run+0xc2>
			break;
 80008f4:	bf00      	nop
 80008f6:	e000      	b.n	80008fa <tuning_run+0xc2>
			break;
 80008f8:	bf00      	nop
	}
	color_press_handler();
 80008fa:	f7ff ff1d 	bl	8000738 <color_press_handler>
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000008 	.word	0x20000008
 8000908:	200000cd 	.word	0x200000cd

0800090c <tuning_generate_lcd_data>:

void tuning_generate_lcd_data(uint8_t * data)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	data[0] = tuning_state;
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <tuning_generate_lcd_data+0x2c>)
 8000916:	781a      	ldrb	r2, [r3, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	701a      	strb	r2, [r3, #0]
	data[1] = time_tuning[tuning_state];
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <tuning_generate_lcd_data+0x2c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3301      	adds	r3, #1
 8000926:	4a05      	ldr	r2, [pc, #20]	; (800093c <tuning_generate_lcd_data+0x30>)
 8000928:	5c52      	ldrb	r2, [r2, r1]
 800092a:	701a      	strb	r2, [r3, #0]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	200000cd 	.word	0x200000cd
 800093c:	200000d0 	.word	0x200000d0

08000940 <button_reading>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
void button_reading(void)
{
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
    for (char i = 0; i < N0_OF_BUTTONS; i++)
 8000946:	2300      	movs	r3, #0
 8000948:	71fb      	strb	r3, [r7, #7]
 800094a:	e06b      	b.n	8000a24 <button_reading+0xe4>
    {
        debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 800094c:	79fa      	ldrb	r2, [r7, #7]
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	4938      	ldr	r1, [pc, #224]	; (8000a34 <button_reading+0xf4>)
 8000952:	5c89      	ldrb	r1, [r1, r2]
 8000954:	4a38      	ldr	r2, [pc, #224]	; (8000a38 <button_reading+0xf8>)
 8000956:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000958:	79fa      	ldrb	r2, [r7, #7]
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	4937      	ldr	r1, [pc, #220]	; (8000a3c <button_reading+0xfc>)
 800095e:	5c89      	ldrb	r1, [r1, r2]
 8000960:	4a34      	ldr	r2, [pc, #208]	; (8000a34 <button_reading+0xf4>)
 8000962:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(btn_port[i], btn_pin[i]);
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	4a36      	ldr	r2, [pc, #216]	; (8000a40 <button_reading+0x100>)
 8000968:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	4935      	ldr	r1, [pc, #212]	; (8000a44 <button_reading+0x104>)
 8000970:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000974:	79fc      	ldrb	r4, [r7, #7]
 8000976:	4619      	mov	r1, r3
 8000978:	4610      	mov	r0, r2
 800097a:	f001 fbc7 	bl	800210c <HAL_GPIO_ReadPin>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	4b2e      	ldr	r3, [pc, #184]	; (8000a3c <button_reading+0xfc>)
 8000984:	551a      	strb	r2, [r3, r4]
        if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	4a2c      	ldr	r2, [pc, #176]	; (8000a3c <button_reading+0xfc>)
 800098a:	5cd2      	ldrb	r2, [r2, r3]
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	4929      	ldr	r1, [pc, #164]	; (8000a34 <button_reading+0xf4>)
 8000990:	5ccb      	ldrb	r3, [r1, r3]
 8000992:	429a      	cmp	r2, r3
 8000994:	d143      	bne.n	8000a1e <button_reading+0xde>
            && debounceButtonBuffer2[i] == debounceButtonBuffer3[i])
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	4a26      	ldr	r2, [pc, #152]	; (8000a34 <button_reading+0xf4>)
 800099a:	5cd2      	ldrb	r2, [r2, r3]
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	4926      	ldr	r1, [pc, #152]	; (8000a38 <button_reading+0xf8>)
 80009a0:	5ccb      	ldrb	r3, [r1, r3]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d13b      	bne.n	8000a1e <button_reading+0xde>
        {
            if (buttonBuffer[i] != debounceButtonBuffer1[i])
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4a27      	ldr	r2, [pc, #156]	; (8000a48 <button_reading+0x108>)
 80009aa:	5cd2      	ldrb	r2, [r2, r3]
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	4923      	ldr	r1, [pc, #140]	; (8000a3c <button_reading+0xfc>)
 80009b0:	5ccb      	ldrb	r3, [r1, r3]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d015      	beq.n	80009e2 <button_reading+0xa2>
            {
                buttonBuffer[i] = debounceButtonBuffer1[i];
 80009b6:	79fa      	ldrb	r2, [r7, #7]
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4920      	ldr	r1, [pc, #128]	; (8000a3c <button_reading+0xfc>)
 80009bc:	5c89      	ldrb	r1, [r1, r2]
 80009be:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <button_reading+0x108>)
 80009c0:	54d1      	strb	r1, [r2, r3]
                if (buttonBuffer[i] == BUTTON_IS_PRESSED)
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	4a20      	ldr	r2, [pc, #128]	; (8000a48 <button_reading+0x108>)
 80009c6:	5cd3      	ldrb	r3, [r2, r3]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d128      	bne.n	8000a1e <button_reading+0xde>
                {
                    if (i == TIME_BUTTON)
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d101      	bne.n	80009d6 <button_reading+0x96>
                        update_light_time();
 80009d2:	f7ff fee9 	bl	80007a8 <update_light_time>
                    counterForButtonPress1s[i] = DURATION_FOR_AUTO_INCREASING;
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <button_reading+0x10c>)
 80009da:	2114      	movs	r1, #20
 80009dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009e0:	e01d      	b.n	8000a1e <button_reading+0xde>
                }
            }
            else 
            {   
                if (buttonBuffer[i] == BUTTON_IS_PRESSED)
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <button_reading+0x108>)
 80009e6:	5cd3      	ldrb	r3, [r2, r3]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d118      	bne.n	8000a1e <button_reading+0xde>
                {
                    counterForButtonPress1s[i]--;
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <button_reading+0x10c>)
 80009f0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009f4:	3a01      	subs	r2, #1
 80009f6:	b291      	uxth	r1, r2
 80009f8:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <button_reading+0x10c>)
 80009fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    if (counterForButtonPress1s[i] <= 0)
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <button_reading+0x10c>)
 8000a02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d109      	bne.n	8000a1e <button_reading+0xde>
                    {
                        // TODO
                        if (i == TIME_BUTTON)
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d101      	bne.n	8000a14 <button_reading+0xd4>
                            update_light_time();
 8000a10:	f7ff feca 	bl	80007a8 <update_light_time>
                        counterForButtonPress1s[i] = DURATION_FOR_AUTO_INCREASING;
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <button_reading+0x10c>)
 8000a18:	2114      	movs	r1, #20
 8000a1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (char i = 0; i < N0_OF_BUTTONS; i++)
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	3301      	adds	r3, #1
 8000a22:	71fb      	strb	r3, [r7, #7]
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d990      	bls.n	800094c <button_reading+0xc>
                }
            }
        }
        
    }
}
 8000a2a:	bf00      	nop
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd90      	pop	{r4, r7, pc}
 8000a34:	20000020 	.word	0x20000020
 8000a38:	20000024 	.word	0x20000024
 8000a3c:	2000001c 	.word	0x2000001c
 8000a40:	2000000c 	.word	0x2000000c
 8000a44:	080044dc 	.word	0x080044dc
 8000a48:	20000018 	.word	0x20000018
 8000a4c:	200000d4 	.word	0x200000d4

08000a50 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
    if (index < 0 || index >= N0_OF_BUTTONS)
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d901      	bls.n	8000a64 <is_button_pressed+0x14>
        return 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	e007      	b.n	8000a74 <is_button_pressed+0x24>
    return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <is_button_pressed+0x30>)
 8000a68:	5cd3      	ldrb	r3, [r2, r3]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	bf0c      	ite	eq
 8000a6e:	2301      	moveq	r3, #1
 8000a70:	2300      	movne	r3, #0
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000018 	.word	0x20000018

08000a84 <lcd_send_cmd>:
#include "lcd.h"

extern I2C_HandleTypeDef hi2c1;

static uint8_t lcd_send_cmd(uint8_t cmd)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[4] =
    {
        LCD_CMD_MSB_EN(cmd),
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	f023 030f 	bic.w	r3, r3, #15
 8000a96:	b25b      	sxtb	r3, r3
 8000a98:	f043 030c 	orr.w	r3, r3, #12
 8000a9c:	b25b      	sxtb	r3, r3
 8000a9e:	b2db      	uxtb	r3, r3
    uint8_t buffer[4] =
 8000aa0:	733b      	strb	r3, [r7, #12]
        LCD_CMD_MSB_DIS(cmd),
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	f023 030f 	bic.w	r3, r3, #15
 8000aaa:	b25b      	sxtb	r3, r3
 8000aac:	f043 0308 	orr.w	r3, r3, #8
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	b2db      	uxtb	r3, r3
    uint8_t buffer[4] =
 8000ab4:	737b      	strb	r3, [r7, #13]
        LCD_CMD_LSB_EN(cmd),
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	011b      	lsls	r3, r3, #4
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	f043 030c 	orr.w	r3, r3, #12
 8000ac0:	b25b      	sxtb	r3, r3
 8000ac2:	b2db      	uxtb	r3, r3
    uint8_t buffer[4] =
 8000ac4:	73bb      	strb	r3, [r7, #14]
        LCD_CMD_LSB_DIS(cmd)
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	011b      	lsls	r3, r3, #4
 8000aca:	b25b      	sxtb	r3, r3
 8000acc:	f043 0308 	orr.w	r3, r3, #8
 8000ad0:	b25b      	sxtb	r3, r3
 8000ad2:	b2db      	uxtb	r3, r3
    uint8_t buffer[4] =
 8000ad4:	73fb      	strb	r3, [r7, #15]
    };
    if (HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, (uint8_t *) buffer, 4, HAL_MAX_DELAY)
 8000ad6:	f107 020c 	add.w	r2, r7, #12
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	2142      	movs	r1, #66	; 0x42
 8000ae4:	4806      	ldr	r0, [pc, #24]	; (8000b00 <lcd_send_cmd+0x7c>)
 8000ae6:	f001 fca7 	bl	8002438 <HAL_I2C_Master_Transmit>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <lcd_send_cmd+0x70>
        != HAL_OK)
    {
        return 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	e000      	b.n	8000af6 <lcd_send_cmd+0x72>
    }
    return 1;
 8000af4:	2301      	movs	r3, #1
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000dc 	.word	0x200000dc

08000b04 <lcd_send_data>:


static uint8_t lcd_send_data(uint8_t data)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af02      	add	r7, sp, #8
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[4] =
    {
        LCD_DATA_MSB_EN(data),
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	f023 030f 	bic.w	r3, r3, #15
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	f043 030d 	orr.w	r3, r3, #13
 8000b1c:	b25b      	sxtb	r3, r3
 8000b1e:	b2db      	uxtb	r3, r3
    uint8_t buffer[4] =
 8000b20:	733b      	strb	r3, [r7, #12]
        LCD_DATA_MSB_DIS(data),
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	f023 030f 	bic.w	r3, r3, #15
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	f043 0309 	orr.w	r3, r3, #9
 8000b30:	b25b      	sxtb	r3, r3
 8000b32:	b2db      	uxtb	r3, r3
    uint8_t buffer[4] =
 8000b34:	737b      	strb	r3, [r7, #13]
        LCD_DATA_LSB_EN(data),
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	011b      	lsls	r3, r3, #4
 8000b3a:	b25b      	sxtb	r3, r3
 8000b3c:	f043 030d 	orr.w	r3, r3, #13
 8000b40:	b25b      	sxtb	r3, r3
 8000b42:	b2db      	uxtb	r3, r3
    uint8_t buffer[4] =
 8000b44:	73bb      	strb	r3, [r7, #14]
        LCD_DATA_LSB_DIS(data)
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	011b      	lsls	r3, r3, #4
 8000b4a:	b25b      	sxtb	r3, r3
 8000b4c:	f043 0309 	orr.w	r3, r3, #9
 8000b50:	b25b      	sxtb	r3, r3
 8000b52:	b2db      	uxtb	r3, r3
    uint8_t buffer[4] =
 8000b54:	73fb      	strb	r3, [r7, #15]
    };
    if (HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, (uint8_t *) buffer, 4, HAL_MAX_DELAY)
 8000b56:	f107 020c 	add.w	r2, r7, #12
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2304      	movs	r3, #4
 8000b62:	2142      	movs	r1, #66	; 0x42
 8000b64:	4806      	ldr	r0, [pc, #24]	; (8000b80 <lcd_send_data+0x7c>)
 8000b66:	f001 fc67 	bl	8002438 <HAL_I2C_Master_Transmit>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <lcd_send_data+0x70>
        != HAL_OK)
    {
        return 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	e000      	b.n	8000b76 <lcd_send_data+0x72>
    }
    return 1;
 8000b74:	2301      	movs	r3, #1
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200000dc 	.word	0x200000dc

08000b84 <lcd_init>:
    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, (uint8_t *) data, 1, HAL_MAX_DELAY);
    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, (uint8_t *) data, 1, HAL_MAX_DELAY);
}

void lcd_init()
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
//    while (!lcd_send_cmd(LCD_CURSOR_INCREMENT));
//    while (!lcd_send_cmd(LCD_CLEAR_DISPLAY));

//    HAL_Delay(2);
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000b88:	2032      	movs	r0, #50	; 0x32
 8000b8a:	f001 f809 	bl	8001ba0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000b8e:	2030      	movs	r0, #48	; 0x30
 8000b90:	f7ff ff78 	bl	8000a84 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000b94:	2005      	movs	r0, #5
 8000b96:	f001 f803 	bl	8001ba0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000b9a:	2030      	movs	r0, #48	; 0x30
 8000b9c:	f7ff ff72 	bl	8000a84 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f000 fffd 	bl	8001ba0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ba6:	2030      	movs	r0, #48	; 0x30
 8000ba8:	f7ff ff6c 	bl	8000a84 <lcd_send_cmd>
	HAL_Delay(10);
 8000bac:	200a      	movs	r0, #10
 8000bae:	f000 fff7 	bl	8001ba0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000bb2:	2020      	movs	r0, #32
 8000bb4:	f7ff ff66 	bl	8000a84 <lcd_send_cmd>
	HAL_Delay(10);
 8000bb8:	200a      	movs	r0, #10
 8000bba:	f000 fff1 	bl	8001ba0 <HAL_Delay>

 // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000bbe:	2028      	movs	r0, #40	; 0x28
 8000bc0:	f7ff ff60 	bl	8000a84 <lcd_send_cmd>
	HAL_Delay(1);
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f000 ffeb 	bl	8001ba0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000bca:	2008      	movs	r0, #8
 8000bcc:	f7ff ff5a 	bl	8000a84 <lcd_send_cmd>
	HAL_Delay(1);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f000 ffe5 	bl	8001ba0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff ff54 	bl	8000a84 <lcd_send_cmd>
	HAL_Delay(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f000 ffdf 	bl	8001ba0 <HAL_Delay>
	HAL_Delay(1);
 8000be2:	2001      	movs	r0, #1
 8000be4:	f000 ffdc 	bl	8001ba0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000be8:	2006      	movs	r0, #6
 8000bea:	f7ff ff4b 	bl	8000a84 <lcd_send_cmd>
	HAL_Delay(1);
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f000 ffd6 	bl	8001ba0 <HAL_Delay>
	lcd_send_cmd (0x0C);
 8000bf4:	200c      	movs	r0, #12
 8000bf6:	f7ff ff45 	bl	8000a84 <lcd_send_cmd>

}   
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <lcd_send_string>:

void lcd_send_string(char *str)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
    while(*str)
 8000c06:	e006      	b.n	8000c16 <lcd_send_string+0x18>
    {
        lcd_send_data(*str++);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff77 	bl	8000b04 <lcd_send_data>
    while(*str)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d1f4      	bne.n	8000c08 <lcd_send_string+0xa>
    }
}
 8000c1e:	bf00      	nop
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <lcd_clear>:

void lcd_clear(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
    lcd_send_cmd(LCD_CLEAR_DISPLAY);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f7ff ff29 	bl	8000a84 <lcd_send_cmd>
    HAL_Delay(2);
 8000c32:	2002      	movs	r0, #2
 8000c34:	f000 ffb4 	bl	8001ba0 <HAL_Delay>
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t col)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	460a      	mov	r2, r1
 8000c46:	71fb      	strb	r3, [r7, #7]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73fb      	strb	r3, [r7, #15]
    if (col >= 20) col = 0;
 8000c50:	79bb      	ldrb	r3, [r7, #6]
 8000c52:	2b13      	cmp	r3, #19
 8000c54:	d901      	bls.n	8000c5a <lcd_set_cursor+0x1e>
 8000c56:	2300      	movs	r3, #0
 8000c58:	71bb      	strb	r3, [r7, #6]
    if (row == 0)
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d103      	bne.n	8000c68 <lcd_set_cursor+0x2c>
    {
        addr = 0x80 + col;
 8000c60:	79bb      	ldrb	r3, [r7, #6]
 8000c62:	3b80      	subs	r3, #128	; 0x80
 8000c64:	73fb      	strb	r3, [r7, #15]
 8000c66:	e005      	b.n	8000c74 <lcd_set_cursor+0x38>
    }
    else if (row == 1)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d102      	bne.n	8000c74 <lcd_set_cursor+0x38>
    {
        addr = 0xC0 + col;
 8000c6e:	79bb      	ldrb	r3, [r7, #6]
 8000c70:	3b40      	subs	r3, #64	; 0x40
 8000c72:	73fb      	strb	r3, [r7, #15]
    }
    lcd_send_cmd(addr);
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff04 	bl	8000a84 <lcd_send_cmd>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <generate_str_from_mode>:
    sprintf(buffer, "%lu", num);
    lcd_send_string(buffer);
}

static void generate_str_from_mode(uint8_t mode, char * str)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
    switch (mode)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d006      	beq.n	8000ca4 <generate_str_from_mode+0x20>
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	dc19      	bgt.n	8000cce <generate_str_from_mode+0x4a>
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d010      	beq.n	8000cc0 <generate_str_from_mode+0x3c>
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d007      	beq.n	8000cb2 <generate_str_from_mode+0x2e>
 8000ca2:	e014      	b.n	8000cce <generate_str_from_mode+0x4a>
    {
    case RED:
        strcpy(str, "R");
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	4910      	ldr	r1, [pc, #64]	; (8000ce8 <generate_str_from_mode+0x64>)
 8000ca8:	461a      	mov	r2, r3
 8000caa:	460b      	mov	r3, r1
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	8013      	strh	r3, [r2, #0]
        break;
 8000cb0:	e015      	b.n	8000cde <generate_str_from_mode+0x5a>
    case GREEN:
        strcpy(str, "G");
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	490d      	ldr	r1, [pc, #52]	; (8000cec <generate_str_from_mode+0x68>)
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	460b      	mov	r3, r1
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	8013      	strh	r3, [r2, #0]
        break;
 8000cbe:	e00e      	b.n	8000cde <generate_str_from_mode+0x5a>
    case AMBER:
        strcpy(str, "A");
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	490b      	ldr	r1, [pc, #44]	; (8000cf0 <generate_str_from_mode+0x6c>)
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	8013      	strh	r3, [r2, #0]
        break;
 8000ccc:	e007      	b.n	8000cde <generate_str_from_mode+0x5a>
    default:
        strcpy(str, "UNKNOWN");
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	4908      	ldr	r1, [pc, #32]	; (8000cf4 <generate_str_from_mode+0x70>)
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	cb03      	ldmia	r3!, {r0, r1}
 8000cd8:	6010      	str	r0, [r2, #0]
 8000cda:	6051      	str	r1, [r2, #4]
        break;
 8000cdc:	bf00      	nop
    }
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	08004464 	.word	0x08004464
 8000cec:	08004468 	.word	0x08004468
 8000cf0:	0800446c 	.word	0x0800446c
 8000cf4:	08004470 	.word	0x08004470

08000cf8 <lcd_display_mode>:

void lcd_display_mode(MODE mode, uint8_t * data)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
    lcd_clear();
 8000d04:	f7ff ff90 	bl	8000c28 <lcd_clear>
    char buffer[6];
    char temp[16];
    switch (mode)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	f000 8086 	beq.w	8000e1c <lcd_display_mode+0x124>
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	f300 80a6 	bgt.w	8000e62 <lcd_display_mode+0x16a>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <lcd_display_mode+0x28>
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d041      	beq.n	8000da2 <lcd_display_mode+0xaa>
 8000d1e:	e0a0      	b.n	8000e62 <lcd_display_mode+0x16a>
    {
    case AUTO:

        lcd_set_cursor(0, 0);
 8000d20:	2100      	movs	r1, #0
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff ff8a 	bl	8000c3c <lcd_set_cursor>
        lcd_send_string("MODE : AUTO");
 8000d28:	4854      	ldr	r0, [pc, #336]	; (8000e7c <lcd_display_mode+0x184>)
 8000d2a:	f7ff ff68 	bl	8000bfe <lcd_send_string>

        generate_str_from_mode(data[0], buffer);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	f107 0218 	add.w	r2, r7, #24
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ffa3 	bl	8000c84 <generate_str_from_mode>

        lcd_set_cursor(1, 0);
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2001      	movs	r0, #1
 8000d42:	f7ff ff7b 	bl	8000c3c <lcd_set_cursor>
        sprintf(temp, "%s %d\0", buffer, data[2]);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	3302      	adds	r3, #2
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	f107 0218 	add.w	r2, r7, #24
 8000d50:	f107 0008 	add.w	r0, r7, #8
 8000d54:	494a      	ldr	r1, [pc, #296]	; (8000e80 <lcd_display_mode+0x188>)
 8000d56:	f002 ff71 	bl	8003c3c <siprintf>
        lcd_send_string(temp);
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff4d 	bl	8000bfe <lcd_send_string>

        strcpy(temp, "");
 8000d64:	2300      	movs	r3, #0
 8000d66:	723b      	strb	r3, [r7, #8]
        generate_str_from_mode(data[1], buffer);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	f107 0218 	add.w	r2, r7, #24
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff85 	bl	8000c84 <generate_str_from_mode>
        lcd_set_cursor(1, 8);
 8000d7a:	2108      	movs	r1, #8
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f7ff ff5d 	bl	8000c3c <lcd_set_cursor>
        sprintf(temp, "%s %d\0", buffer, data[3]);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	3303      	adds	r3, #3
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	f107 0218 	add.w	r2, r7, #24
 8000d8c:	f107 0008 	add.w	r0, r7, #8
 8000d90:	493b      	ldr	r1, [pc, #236]	; (8000e80 <lcd_display_mode+0x188>)
 8000d92:	f002 ff53 	bl	8003c3c <siprintf>
        lcd_send_string(temp);
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff2f 	bl	8000bfe <lcd_send_string>
        break;
 8000da0:	e067      	b.n	8000e72 <lcd_display_mode+0x17a>

    case MANUAL:

        generate_str_from_mode(data[0], buffer);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	f107 0218 	add.w	r2, r7, #24
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff69 	bl	8000c84 <generate_str_from_mode>

        lcd_set_cursor(0, 0);
 8000db2:	2100      	movs	r1, #0
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff ff41 	bl	8000c3c <lcd_set_cursor>
        lcd_send_string("MODE : MANUAL");
 8000dba:	4832      	ldr	r0, [pc, #200]	; (8000e84 <lcd_display_mode+0x18c>)
 8000dbc:	f7ff ff1f 	bl	8000bfe <lcd_send_string>

        lcd_set_cursor(1, 0);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f7ff ff3a 	bl	8000c3c <lcd_set_cursor>
        sprintf(temp, "1: %s\0", buffer);
 8000dc8:	f107 0218 	add.w	r2, r7, #24
 8000dcc:	f107 0308 	add.w	r3, r7, #8
 8000dd0:	492d      	ldr	r1, [pc, #180]	; (8000e88 <lcd_display_mode+0x190>)
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 ff32 	bl	8003c3c <siprintf>
        lcd_send_string(temp);
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff0e 	bl	8000bfe <lcd_send_string>

        generate_str_from_mode(data[1], buffer);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	f107 0218 	add.w	r2, r7, #24
 8000dec:	4611      	mov	r1, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff48 	bl	8000c84 <generate_str_from_mode>

        strcpy(temp, "");
 8000df4:	2300      	movs	r3, #0
 8000df6:	723b      	strb	r3, [r7, #8]
        lcd_set_cursor(1, 10);
 8000df8:	210a      	movs	r1, #10
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f7ff ff1e 	bl	8000c3c <lcd_set_cursor>
        sprintf(temp, "2: %s\0", buffer);
 8000e00:	f107 0218 	add.w	r2, r7, #24
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	4920      	ldr	r1, [pc, #128]	; (8000e8c <lcd_display_mode+0x194>)
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f002 ff16 	bl	8003c3c <siprintf>
        lcd_send_string(temp);
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fef2 	bl	8000bfe <lcd_send_string>

        break;
 8000e1a:	e02a      	b.n	8000e72 <lcd_display_mode+0x17a>

    case TUNING:

        generate_str_from_mode(data[0], buffer);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	f107 0218 	add.w	r2, r7, #24
 8000e24:	4611      	mov	r1, r2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff2c 	bl	8000c84 <generate_str_from_mode>

        lcd_set_cursor(0, 0);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f7ff ff04 	bl	8000c3c <lcd_set_cursor>
        lcd_send_string("MODE : TUNING");
 8000e34:	4816      	ldr	r0, [pc, #88]	; (8000e90 <lcd_display_mode+0x198>)
 8000e36:	f7ff fee2 	bl	8000bfe <lcd_send_string>

        lcd_set_cursor(1, 0);
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f7ff fefd 	bl	8000c3c <lcd_set_cursor>
        sprintf(temp, "%s TIME: %d\0", buffer, data[1]);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	f107 0218 	add.w	r2, r7, #24
 8000e4c:	f107 0008 	add.w	r0, r7, #8
 8000e50:	4910      	ldr	r1, [pc, #64]	; (8000e94 <lcd_display_mode+0x19c>)
 8000e52:	f002 fef3 	bl	8003c3c <siprintf>
        lcd_send_string(temp);
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fecf 	bl	8000bfe <lcd_send_string>
        break;
 8000e60:	e007      	b.n	8000e72 <lcd_display_mode+0x17a>

    default:
        lcd_set_cursor(0, 0);
 8000e62:	2100      	movs	r1, #0
 8000e64:	2000      	movs	r0, #0
 8000e66:	f7ff fee9 	bl	8000c3c <lcd_set_cursor>
        lcd_send_string("MODE : UNKNOWN");
 8000e6a:	480b      	ldr	r0, [pc, #44]	; (8000e98 <lcd_display_mode+0x1a0>)
 8000e6c:	f7ff fec7 	bl	8000bfe <lcd_send_string>
        break;
 8000e70:	bf00      	nop
    }
}
 8000e72:	bf00      	nop
 8000e74:	3720      	adds	r7, #32
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	08004478 	.word	0x08004478
 8000e80:	08004484 	.word	0x08004484
 8000e84:	0800448c 	.word	0x0800448c
 8000e88:	0800449c 	.word	0x0800449c
 8000e8c:	080044a4 	.word	0x080044a4
 8000e90:	080044ac 	.word	0x080044ac
 8000e94:	080044bc 	.word	0x080044bc
 8000e98:	080044cc 	.word	0x080044cc

08000e9c <amber>:
};

static uint8_t toggle = 0;

static void amber(uint8_t light)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LIGHT_PORT[light][0], LIGHT_PIN[light][0], LED_ON);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <amber+0x48>)
 8000eaa:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <amber+0x4c>)
 8000eb2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f001 f93e 	bl	800213a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LIGHT_PORT[light][1], LIGHT_PIN[light][1], LED_OFF);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <amber+0x48>)
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	4413      	add	r3, r2
 8000ec6:	6858      	ldr	r0, [r3, #4]
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <amber+0x4c>)
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	885b      	ldrh	r3, [r3, #2]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f001 f930 	bl	800213a <HAL_GPIO_WritePin>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000030 	.word	0x20000030
 8000ee8:	20000028 	.word	0x20000028

08000eec <green>:

static void green(uint8_t light)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LIGHT_PORT[light][0], LIGHT_PIN[light][0], LED_OFF);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <green+0x48>)
 8000efa:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <green+0x4c>)
 8000f02:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000f06:	2200      	movs	r2, #0
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f001 f916 	bl	800213a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LIGHT_PORT[light][1], LIGHT_PIN[light][1], LED_ON);
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <green+0x48>)
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	4413      	add	r3, r2
 8000f16:	6858      	ldr	r0, [r3, #4]
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <green+0x4c>)
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	885b      	ldrh	r3, [r3, #2]
 8000f22:	2201      	movs	r2, #1
 8000f24:	4619      	mov	r1, r3
 8000f26:	f001 f908 	bl	800213a <HAL_GPIO_WritePin>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000030 	.word	0x20000030
 8000f38:	20000028 	.word	0x20000028

08000f3c <red>:

static void red(uint8_t light)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LIGHT_PORT[light][0], LIGHT_PIN[light][0], LED_ON);
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <red+0x48>)
 8000f4a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <red+0x4c>)
 8000f52:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000f56:	2201      	movs	r2, #1
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f001 f8ee 	bl	800213a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LIGHT_PORT[light][1], LIGHT_PIN[light][1], LED_ON);
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <red+0x48>)
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	4413      	add	r3, r2
 8000f66:	6858      	ldr	r0, [r3, #4]
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <red+0x4c>)
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	885b      	ldrh	r3, [r3, #2]
 8000f72:	2201      	movs	r2, #1
 8000f74:	4619      	mov	r1, r3
 8000f76:	f001 f8e0 	bl	800213a <HAL_GPIO_WritePin>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000030 	.word	0x20000030
 8000f88:	20000028 	.word	0x20000028

08000f8c <off_light>:

static void off_light(uint8_t light)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LIGHT_PORT[light][0], LIGHT_PIN[light][0], LED_OFF);
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <off_light+0x48>)
 8000f9a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <off_light+0x4c>)
 8000fa2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f001 f8c6 	bl	800213a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LIGHT_PORT[light][1], LIGHT_PIN[light][1], LED_OFF);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <off_light+0x48>)
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	4413      	add	r3, r2
 8000fb6:	6858      	ldr	r0, [r3, #4]
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <off_light+0x4c>)
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	885b      	ldrh	r3, [r3, #2]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f001 f8b8 	bl	800213a <HAL_GPIO_WritePin>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000030 	.word	0x20000030
 8000fd8:	20000028 	.word	0x20000028

08000fdc <light_off_all>:

void light_off_all(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    off_light(LIGHT_1);
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f7ff ffd3 	bl	8000f8c <off_light>
    off_light(LIGHT_2);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f7ff ffd0 	bl	8000f8c <off_light>
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <light_toggle>:

void light_toggle(uint8_t led)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
    if (toggle)
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <light_toggle+0x78>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d021      	beq.n	8001046 <light_toggle+0x56>
    {
        switch (led)
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d014      	beq.n	8001032 <light_toggle+0x42>
 8001008:	2b02      	cmp	r3, #2
 800100a:	dc19      	bgt.n	8001040 <light_toggle+0x50>
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <light_toggle+0x26>
 8001010:	2b01      	cmp	r3, #1
 8001012:	d007      	beq.n	8001024 <light_toggle+0x34>
 8001014:	e014      	b.n	8001040 <light_toggle+0x50>
        {
        case AMBER:
            amber(LIGHT_1);
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff ff40 	bl	8000e9c <amber>
            amber(LIGHT_2);
 800101c:	2001      	movs	r0, #1
 800101e:	f7ff ff3d 	bl	8000e9c <amber>
            break;
 8001022:	e012      	b.n	800104a <light_toggle+0x5a>
        case GREEN:
            green(LIGHT_1);
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff ff61 	bl	8000eec <green>
            green(LIGHT_2);
 800102a:	2001      	movs	r0, #1
 800102c:	f7ff ff5e 	bl	8000eec <green>
            break;
 8001030:	e00b      	b.n	800104a <light_toggle+0x5a>
        case RED:
            red(LIGHT_1);
 8001032:	2000      	movs	r0, #0
 8001034:	f7ff ff82 	bl	8000f3c <red>
            red(LIGHT_2);
 8001038:	2001      	movs	r0, #1
 800103a:	f7ff ff7f 	bl	8000f3c <red>
            break;
 800103e:	e004      	b.n	800104a <light_toggle+0x5a>
        default:
            light_off_all();
 8001040:	f7ff ffcc 	bl	8000fdc <light_off_all>
            break;
 8001044:	e001      	b.n	800104a <light_toggle+0x5a>
        }
    }
    else
    {
        light_off_all();
 8001046:	f7ff ffc9 	bl	8000fdc <light_off_all>
    }
    toggle = !toggle;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <light_toggle+0x78>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	bf0c      	ite	eq
 8001052:	2301      	moveq	r3, #1
 8001054:	2300      	movne	r3, #0
 8001056:	b2db      	uxtb	r3, r3
 8001058:	461a      	mov	r2, r3
 800105a:	4b03      	ldr	r3, [pc, #12]	; (8001068 <light_toggle+0x78>)
 800105c:	701a      	strb	r2, [r3, #0]
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200000da 	.word	0x200000da

0800106c <light_1_handle>:

void light_1_handle(uint8_t led)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
    switch (led)
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d00e      	beq.n	800109a <light_1_handle+0x2e>
 800107c:	2b02      	cmp	r3, #2
 800107e:	dc10      	bgt.n	80010a2 <light_1_handle+0x36>
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <light_1_handle+0x1e>
 8001084:	2b01      	cmp	r3, #1
 8001086:	d004      	beq.n	8001092 <light_1_handle+0x26>
 8001088:	e00b      	b.n	80010a2 <light_1_handle+0x36>
    {
    case AMBER:
        amber(LIGHT_1);
 800108a:	2000      	movs	r0, #0
 800108c:	f7ff ff06 	bl	8000e9c <amber>
        break;
 8001090:	e00b      	b.n	80010aa <light_1_handle+0x3e>
    case GREEN:
        green(LIGHT_1);
 8001092:	2000      	movs	r0, #0
 8001094:	f7ff ff2a 	bl	8000eec <green>
        break;
 8001098:	e007      	b.n	80010aa <light_1_handle+0x3e>
    case RED:
        red(LIGHT_1);
 800109a:	2000      	movs	r0, #0
 800109c:	f7ff ff4e 	bl	8000f3c <red>
        break;
 80010a0:	e003      	b.n	80010aa <light_1_handle+0x3e>
    default:
        off_light(LIGHT_1);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff ff72 	bl	8000f8c <off_light>
        break;
 80010a8:	bf00      	nop
    }
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <light_2_handle>:

void light_2_handle(uint8_t led)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	71fb      	strb	r3, [r7, #7]
    switch (led)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d00e      	beq.n	80010e0 <light_2_handle+0x2e>
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	dc10      	bgt.n	80010e8 <light_2_handle+0x36>
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d002      	beq.n	80010d0 <light_2_handle+0x1e>
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d004      	beq.n	80010d8 <light_2_handle+0x26>
 80010ce:	e00b      	b.n	80010e8 <light_2_handle+0x36>
    {
    case AMBER:
        amber(LIGHT_2);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f7ff fee3 	bl	8000e9c <amber>
        break;
 80010d6:	e00b      	b.n	80010f0 <light_2_handle+0x3e>
    case GREEN:
        green(LIGHT_2);
 80010d8:	2001      	movs	r0, #1
 80010da:	f7ff ff07 	bl	8000eec <green>
        break;
 80010de:	e007      	b.n	80010f0 <light_2_handle+0x3e>
    case RED:
        red(LIGHT_2);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f7ff ff2b 	bl	8000f3c <red>
        break;
 80010e6:	e003      	b.n	80010f0 <light_2_handle+0x3e>
    default:
        off_light(LIGHT_2);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f7ff ff4f 	bl	8000f8c <off_light>
        break;
 80010ee:	bf00      	nop
    }
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <lcd_display>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void lcd_display()
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
    lcd_display_mode(fsm_state, lcd_data);
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <lcd_display+0x14>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4903      	ldr	r1, [pc, #12]	; (8001110 <lcd_display+0x18>)
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fdf8 	bl	8000cf8 <lcd_display_mode>
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200000b8 	.word	0x200000b8
 8001110:	200000bc 	.word	0x200000bc

08001114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001118:	f000 fce0 	bl	8001adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111c:	f000 f834 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001120:	f000 f8ec 	bl	80012fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001124:	f000 f870 	bl	8001208 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001128:	f000 f89c 	bl	8001264 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800112c:	4811      	ldr	r0, [pc, #68]	; (8001174 <main+0x60>)
 800112e:	f002 f927 	bl	8003380 <HAL_TIM_Base_Start_IT>
  lcd_init ();
 8001132:	f7ff fd27 	bl	8000b84 <lcd_init>
  fsm_init();
 8001136:	f7ff f83f 	bl	80001b8 <fsm_init>

  Scheduler_Init();
 800113a:	f000 f9a5 	bl	8001488 <Scheduler_Init>
  Scheduler_Add_Task(button_reading, 1, 1);
 800113e:	2201      	movs	r2, #1
 8001140:	2101      	movs	r1, #1
 8001142:	480d      	ldr	r0, [pc, #52]	; (8001178 <main+0x64>)
 8001144:	f000 f9e2 	bl	800150c <Scheduler_Add_Task>
  Scheduler_Add_Task(updateTimer, 3, 1);
 8001148:	2201      	movs	r2, #1
 800114a:	2103      	movs	r1, #3
 800114c:	480b      	ldr	r0, [pc, #44]	; (800117c <main+0x68>)
 800114e:	f000 f9dd 	bl	800150c <Scheduler_Add_Task>
  Scheduler_Add_Task(fsm_run, 5, 1);
 8001152:	2201      	movs	r2, #1
 8001154:	2105      	movs	r1, #5
 8001156:	480a      	ldr	r0, [pc, #40]	; (8001180 <main+0x6c>)
 8001158:	f000 f9d8 	bl	800150c <Scheduler_Add_Task>
  Scheduler_Add_Task(lcd_display, 7, freq_to_tick(LCD_FREQ));
 800115c:	200a      	movs	r0, #10
 800115e:	f000 fb13 	bl	8001788 <freq_to_tick>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	2107      	movs	r1, #7
 8001168:	4806      	ldr	r0, [pc, #24]	; (8001184 <main+0x70>)
 800116a:	f000 f9cf 	bl	800150c <Scheduler_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 Scheduler_Dispatch_Tasks();
 800116e:	f000 fa99 	bl	80016a4 <Scheduler_Dispatch_Tasks>
 8001172:	e7fc      	b.n	800116e <main+0x5a>
 8001174:	20000130 	.word	0x20000130
 8001178:	08000941 	.word	0x08000941
 800117c:	080019a9 	.word	0x080019a9
 8001180:	080001d1 	.word	0x080001d1
 8001184:	080010f9 	.word	0x080010f9

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b090      	sub	sp, #64	; 0x40
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0318 	add.w	r3, r7, #24
 8001192:	2228      	movs	r2, #40	; 0x28
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f002 fd70 	bl	8003c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ae:	2301      	movs	r3, #1
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b2:	2310      	movs	r3, #16
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b6:	2302      	movs	r3, #2
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80011ba:	2300      	movs	r3, #0
 80011bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80011be:	2300      	movs	r3, #0
 80011c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c2:	f107 0318 	add.w	r3, r7, #24
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 fc8e 	bl	8002ae8 <HAL_RCC_OscConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80011d2:	f000 f954 	bl	800147e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d6:	230f      	movs	r3, #15
 80011d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011da:	2302      	movs	r3, #2
 80011dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 fefb 	bl	8002fec <HAL_RCC_ClockConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80011fc:	f000 f93f 	bl	800147e <Error_Handler>
  }
}
 8001200:	bf00      	nop
 8001202:	3740      	adds	r7, #64	; 0x40
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_I2C1_Init+0x50>)
 800120e:	4a13      	ldr	r2, [pc, #76]	; (800125c <MX_I2C1_Init+0x54>)
 8001210:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_I2C1_Init+0x50>)
 8001214:	4a12      	ldr	r2, [pc, #72]	; (8001260 <MX_I2C1_Init+0x58>)
 8001216:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_I2C1_Init+0x50>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_I2C1_Init+0x50>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_I2C1_Init+0x50>)
 8001226:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800122a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <MX_I2C1_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_I2C1_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001244:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_I2C1_Init+0x50>)
 8001246:	f000 ffb3 	bl	80021b0 <HAL_I2C_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001250:	f000 f915 	bl	800147e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200000dc 	.word	0x200000dc
 800125c:	40005400 	.word	0x40005400
 8001260:	000186a0 	.word	0x000186a0

08001264 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	463b      	mov	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <MX_TIM2_Init+0x94>)
 8001282:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001286:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_TIM2_Init+0x94>)
 800128a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800128e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <MX_TIM2_Init+0x94>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_TIM2_Init+0x94>)
 8001298:	2209      	movs	r2, #9
 800129a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <MX_TIM2_Init+0x94>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <MX_TIM2_Init+0x94>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012a8:	4813      	ldr	r0, [pc, #76]	; (80012f8 <MX_TIM2_Init+0x94>)
 80012aa:	f002 f819 	bl	80032e0 <HAL_TIM_Base_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012b4:	f000 f8e3 	bl	800147e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	4619      	mov	r1, r3
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <MX_TIM2_Init+0x94>)
 80012c6:	f002 f99d 	bl	8003604 <HAL_TIM_ConfigClockSource>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012d0:	f000 f8d5 	bl	800147e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_TIM2_Init+0x94>)
 80012e2:	f002 fb7f 	bl	80039e4 <HAL_TIMEx_MasterConfigSynchronization>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012ec:	f000 f8c7 	bl	800147e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000130 	.word	0x20000130

080012fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001310:	4b4e      	ldr	r3, [pc, #312]	; (800144c <MX_GPIO_Init+0x150>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a4d      	ldr	r2, [pc, #308]	; (800144c <MX_GPIO_Init+0x150>)
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b4b      	ldr	r3, [pc, #300]	; (800144c <MX_GPIO_Init+0x150>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001328:	4b48      	ldr	r3, [pc, #288]	; (800144c <MX_GPIO_Init+0x150>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a47      	ldr	r2, [pc, #284]	; (800144c <MX_GPIO_Init+0x150>)
 800132e:	f043 0320 	orr.w	r3, r3, #32
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b45      	ldr	r3, [pc, #276]	; (800144c <MX_GPIO_Init+0x150>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0320 	and.w	r3, r3, #32
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b42      	ldr	r3, [pc, #264]	; (800144c <MX_GPIO_Init+0x150>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a41      	ldr	r2, [pc, #260]	; (800144c <MX_GPIO_Init+0x150>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b3f      	ldr	r3, [pc, #252]	; (800144c <MX_GPIO_Init+0x150>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001358:	4b3c      	ldr	r3, [pc, #240]	; (800144c <MX_GPIO_Init+0x150>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a3b      	ldr	r2, [pc, #236]	; (800144c <MX_GPIO_Init+0x150>)
 800135e:	f043 0308 	orr.w	r3, r3, #8
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b39      	ldr	r3, [pc, #228]	; (800144c <MX_GPIO_Init+0x150>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0308 	and.w	r3, r3, #8
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|L2_1_Pin|L2_0_Pin, GPIO_PIN_RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001376:	4836      	ldr	r0, [pc, #216]	; (8001450 <MX_GPIO_Init+0x154>)
 8001378:	f000 fedf 	bl	800213a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L1_1_GPIO_Port, L1_1_Pin, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2180      	movs	r1, #128	; 0x80
 8001380:	4834      	ldr	r0, [pc, #208]	; (8001454 <MX_GPIO_Init+0x158>)
 8001382:	f000 feda 	bl	800213a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L1_0_GPIO_Port, L1_0_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2140      	movs	r1, #64	; 0x40
 800138a:	4833      	ldr	r0, [pc, #204]	; (8001458 <MX_GPIO_Init+0x15c>)
 800138c:	f000 fed5 	bl	800213a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001396:	4b31      	ldr	r3, [pc, #196]	; (800145c <MX_GPIO_Init+0x160>)
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	4619      	mov	r1, r3
 80013a4:	482b      	ldr	r0, [pc, #172]	; (8001454 <MX_GPIO_Init+0x158>)
 80013a6:	f000 fd2d 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013aa:	230c      	movs	r3, #12
 80013ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	4619      	mov	r1, r3
 80013bc:	4824      	ldr	r0, [pc, #144]	; (8001450 <MX_GPIO_Init+0x154>)
 80013be:	f000 fd21 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin L2_1_Pin L2_0_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|L2_1_Pin|L2_0_Pin;
 80013c2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80013c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	481d      	ldr	r0, [pc, #116]	; (8001450 <MX_GPIO_Init+0x154>)
 80013dc:	f000 fd12 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 80013e0:	f44f 6385 	mov.w	r3, #1064	; 0x428
 80013e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4619      	mov	r1, r3
 80013f4:	4818      	ldr	r0, [pc, #96]	; (8001458 <MX_GPIO_Init+0x15c>)
 80013f6:	f000 fd05 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : L1_1_Pin */
  GPIO_InitStruct.Pin = L1_1_Pin;
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2302      	movs	r3, #2
 8001408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L1_1_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	4619      	mov	r1, r3
 8001410:	4810      	ldr	r0, [pc, #64]	; (8001454 <MX_GPIO_Init+0x158>)
 8001412:	f000 fcf7 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : L1_0_Pin */
  GPIO_InitStruct.Pin = L1_0_Pin;
 8001416:	2340      	movs	r3, #64	; 0x40
 8001418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2302      	movs	r3, #2
 8001424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L1_0_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	4619      	mov	r1, r3
 800142c:	480a      	ldr	r0, [pc, #40]	; (8001458 <MX_GPIO_Init+0x15c>)
 800142e:	f000 fce9 	bl	8001e04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2028      	movs	r0, #40	; 0x28
 8001438:	f000 fcad 	bl	8001d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800143c:	2028      	movs	r0, #40	; 0x28
 800143e:	f000 fcc6 	bl	8001dce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001442:	bf00      	nop
 8001444:	3720      	adds	r7, #32
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	40010800 	.word	0x40010800
 8001454:	40011000 	.word	0x40011000
 8001458:	40010c00 	.word	0x40010c00
 800145c:	10110000 	.word	0x10110000

08001460 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001470:	d101      	bne.n	8001476 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        Scheduler_Update();
 8001472:	f000 f827 	bl	80014c4 <Scheduler_Update>
    }
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001482:	b672      	cpsid	i
}
 8001484:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001486:	e7fe      	b.n	8001486 <Error_Handler+0x8>

08001488 <Scheduler_Init>:
#include "scheduler.h"

Tasks_t tasks;


void Scheduler_Init(void) {
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
    tasks.currentTask = NULL;
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <Scheduler_Init+0x18>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
    tasks.nTasks = 0;
 8001492:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <Scheduler_Init+0x18>)
 8001494:	2200      	movs	r2, #0
 8001496:	605a      	str	r2, [r3, #4]
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	20000178 	.word	0x20000178

080014a4 <Get_New_Task_ID>:

static uint32_t Get_New_Task_ID()
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
    static uint32_t TaskID = 0;
    return ++TaskID;
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <Get_New_Task_ID+0x1c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <Get_New_Task_ID+0x1c>)
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <Get_New_Task_ID+0x1c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000180 	.word	0x20000180

080014c4 <Scheduler_Update>:


void Scheduler_Update(void) {
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
    if (tasks.currentTask && tasks.currentTask->runMe == 0) {
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <Scheduler_Update+0x44>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d017      	beq.n	8001500 <Scheduler_Update+0x3c>
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <Scheduler_Update+0x44>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	7c1b      	ldrb	r3, [r3, #16]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d112      	bne.n	8001500 <Scheduler_Update+0x3c>
		if(tasks.currentTask->delay > 0)
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <Scheduler_Update+0x44>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d004      	beq.n	80014ee <Scheduler_Update+0x2a>
			tasks.currentTask->delay--;
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <Scheduler_Update+0x44>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	3a01      	subs	r2, #1
 80014ec:	609a      	str	r2, [r3, #8]
		if (tasks.currentTask->delay <= 0) 
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <Scheduler_Update+0x44>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d103      	bne.n	8001500 <Scheduler_Update+0x3c>
			tasks.currentTask->runMe = 1;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <Scheduler_Update+0x44>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2201      	movs	r2, #1
 80014fe:	741a      	strb	r2, [r3, #16]
	}
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	20000178 	.word	0x20000178

0800150c <Scheduler_Add_Task>:

uint32_t Scheduler_Add_Task(void (* pFunction)(void), const uint32_t DELAY, const uint32_t PERIOD) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
    TaskNode *newTask = (TaskNode *)malloc(sizeof(TaskNode));
 8001518:	2018      	movs	r0, #24
 800151a:	f002 fad3 	bl	8003ac4 <malloc>
 800151e:	4603      	mov	r3, r0
 8001520:	617b      	str	r3, [r7, #20]
    if (newTask == NULL || tasks.nTasks >= MAX_TASKS) {
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <Scheduler_Add_Task+0x24>
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <Scheduler_Add_Task+0x194>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b09      	cmp	r3, #9
 800152e:	d901      	bls.n	8001534 <Scheduler_Add_Task+0x28>
        return NOT_VALID_TASK_ID;
 8001530:	2300      	movs	r3, #0
 8001532:	e0b1      	b.n	8001698 <Scheduler_Add_Task+0x18c>
    }

    if (tasks.currentTask == NULL) {
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <Scheduler_Add_Task+0x194>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d11e      	bne.n	800157a <Scheduler_Add_Task+0x6e>
        tasks.currentTask = newTask;
 800153c:	4a58      	ldr	r2, [pc, #352]	; (80016a0 <Scheduler_Add_Task+0x194>)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	6013      	str	r3, [r2, #0]
        tasks.nTasks++;
 8001542:	4b57      	ldr	r3, [pc, #348]	; (80016a0 <Scheduler_Add_Task+0x194>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	3301      	adds	r3, #1
 8001548:	4a55      	ldr	r2, [pc, #340]	; (80016a0 <Scheduler_Add_Task+0x194>)
 800154a:	6053      	str	r3, [r2, #4]
        newTask->pTask = pFunction;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	601a      	str	r2, [r3, #0]
        newTask->delay = DELAY;
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	609a      	str	r2, [r3, #8]
        newTask->period = PERIOD;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	60da      	str	r2, [r3, #12]
        newTask->runMe = 0;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2200      	movs	r2, #0
 8001562:	741a      	strb	r2, [r3, #16]
        newTask->TaskID = Get_New_Task_ID();
 8001564:	f7ff ff9e 	bl	80014a4 <Get_New_Task_ID>
 8001568:	4602      	mov	r2, r0
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	615a      	str	r2, [r3, #20]
        newTask->next = NULL;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	2200      	movs	r2, #0
 8001572:	605a      	str	r2, [r3, #4]
        return newTask->TaskID;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	e08e      	b.n	8001698 <Scheduler_Add_Task+0x18c>
    }

    TaskNode *temp_task;
    TaskNode *preTask = NULL;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
    uint8_t newTaskIndex = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]

	for (newTaskIndex = 0, temp_task = tasks.currentTask; 
 800158a:	2300      	movs	r3, #0
 800158c:	77fb      	strb	r3, [r7, #31]
 800158e:	4b44      	ldr	r3, [pc, #272]	; (80016a0 <Scheduler_Add_Task+0x194>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
 8001594:	e079      	b.n	800168a <Scheduler_Add_Task+0x17e>
         newTaskIndex < tasks.nTasks; newTaskIndex++, 
         preTask = temp_task, temp_task = temp_task->next) {

		sumDelay = sumDelay + temp_task->delay;
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4413      	add	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
		//  sumDelay > DELAY -> new task need to be added before current task pointer
		if(sumDelay > DELAY){
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d938      	bls.n	800161a <Scheduler_Add_Task+0x10e>
			// because new task will be added before current task pointer 
			// so the delay of new task will be calculated
			newDelay = DELAY - (sumDelay - temp_task->delay);
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	4413      	add	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
			// and the delay of current task will be reduced
			temp_task->delay = sumDelay - DELAY;
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	1ad2      	subs	r2, r2, r3
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	609a      	str	r2, [r3, #8]
            // move all task after current task pointer to the next index
            newTask->next = temp_task;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c4:	605a      	str	r2, [r3, #4]
            // avoid preTask is empty when add new task at the first index
            if (preTask)
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <Scheduler_Add_Task+0xc8>
                preTask->next = newTask;
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	e002      	b.n	80015da <Scheduler_Add_Task+0xce>
            else 
                tasks.currentTask = newTask;
 80015d4:	4a32      	ldr	r2, [pc, #200]	; (80016a0 <Scheduler_Add_Task+0x194>)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	6013      	str	r3, [r2, #0]
            // add new task to the current task pointer
            newTask->pTask = pFunction;
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	601a      	str	r2, [r3, #0]
            newTask->delay = newDelay;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	609a      	str	r2, [r3, #8]
            newTask->period = PERIOD;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	60da      	str	r2, [r3, #12]
            newTask->runMe = newTask->delay == 0 ? 1 : 0;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	bf0c      	ite	eq
 80015f4:	2301      	moveq	r3, #1
 80015f6:	2300      	movne	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	461a      	mov	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	741a      	strb	r2, [r3, #16]
            newTask->TaskID = Get_New_Task_ID();
 8001600:	f7ff ff50 	bl	80014a4 <Get_New_Task_ID>
 8001604:	4602      	mov	r2, r0
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	615a      	str	r2, [r3, #20]
            tasks.nTasks++;
 800160a:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <Scheduler_Add_Task+0x194>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	3301      	adds	r3, #1
 8001610:	4a23      	ldr	r2, [pc, #140]	; (80016a0 <Scheduler_Add_Task+0x194>)
 8001612:	6053      	str	r3, [r2, #4]
            return newTask->TaskID;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	e03e      	b.n	8001698 <Scheduler_Add_Task+0x18c>
		}
        else {
            if (newTaskIndex == tasks.nTasks - 1)
 800161a:	7ffa      	ldrb	r2, [r7, #31]
 800161c:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <Scheduler_Add_Task+0x194>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	3b01      	subs	r3, #1
 8001622:	429a      	cmp	r2, r3
 8001624:	d129      	bne.n	800167a <Scheduler_Add_Task+0x16e>
            {
                newDelay = DELAY - sumDelay;
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	613b      	str	r3, [r7, #16]
                temp_task->next = newTask;
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	605a      	str	r2, [r3, #4]
                newTask->next = NULL;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]

                // add new task to the current task pointer
                newTask->pTask = pFunction;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	601a      	str	r2, [r3, #0]
                newTask->delay = newDelay;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	609a      	str	r2, [r3, #8]
                newTask->period = PERIOD;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	60da      	str	r2, [r3, #12]
                newTask->runMe = newTask->delay == 0 ? 1 : 0;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf0c      	ite	eq
 8001654:	2301      	moveq	r3, #1
 8001656:	2300      	movne	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	461a      	mov	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	741a      	strb	r2, [r3, #16]
                newTask->TaskID = Get_New_Task_ID();
 8001660:	f7ff ff20 	bl	80014a4 <Get_New_Task_ID>
 8001664:	4602      	mov	r2, r0
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	615a      	str	r2, [r3, #20]
                tasks.nTasks++;
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <Scheduler_Add_Task+0x194>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	3301      	adds	r3, #1
 8001670:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <Scheduler_Add_Task+0x194>)
 8001672:	6053      	str	r3, [r2, #4]
                return newTask->TaskID;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	e00e      	b.n	8001698 <Scheduler_Add_Task+0x18c>
         newTaskIndex < tasks.nTasks; newTaskIndex++, 
 800167a:	7ffb      	ldrb	r3, [r7, #31]
 800167c:	3301      	adds	r3, #1
 800167e:	77fb      	strb	r3, [r7, #31]
         preTask = temp_task, temp_task = temp_task->next) {
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	623b      	str	r3, [r7, #32]
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
         newTaskIndex < tasks.nTasks; newTaskIndex++, 
 800168a:	7ffa      	ldrb	r2, [r7, #31]
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <Scheduler_Add_Task+0x194>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	429a      	cmp	r2, r3
 8001692:	d380      	bcc.n	8001596 <Scheduler_Add_Task+0x8a>
            }
        }
	}
	return newTask->TaskID;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	695b      	ldr	r3, [r3, #20]

}
 8001698:	4618      	mov	r0, r3
 800169a:	3728      	adds	r7, #40	; 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000178 	.word	0x20000178

080016a4 <Scheduler_Dispatch_Tasks>:

void Scheduler_Dispatch_Tasks() {
 80016a4:	b5b0      	push	{r4, r5, r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
	if(tasks.currentTask->runMe > 0) {
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <Scheduler_Dispatch_Tasks+0x5c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	7c1b      	ldrb	r3, [r3, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d021      	beq.n	80016f8 <Scheduler_Dispatch_Tasks+0x54>
		(*(tasks.currentTask->pTask))(); // Run the task
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <Scheduler_Dispatch_Tasks+0x5c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4798      	blx	r3
		tasks.currentTask->runMe = 0; // Reset / reduce RunMe flag
 80016bc:	4b10      	ldr	r3, [pc, #64]	; (8001700 <Scheduler_Dispatch_Tasks+0x5c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2200      	movs	r2, #0
 80016c2:	741a      	strb	r2, [r3, #16]
		TaskNode temtask = *(tasks.currentTask);
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <Scheduler_Dispatch_Tasks+0x5c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	463c      	mov	r4, r7
 80016ca:	461d      	mov	r5, r3
 80016cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016d4:	e884 0003 	stmia.w	r4, {r0, r1}
		if (Scheduler_Remove_Task(temtask.TaskID) && temtask.period > 0) {
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f812 	bl	8001704 <Scheduler_Remove_Task>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d008      	beq.n	80016f8 <Scheduler_Dispatch_Tasks+0x54>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <Scheduler_Dispatch_Tasks+0x54>
			Scheduler_Add_Task(temtask.pTask, temtask.period, temtask.period);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68f9      	ldr	r1, [r7, #12]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff0a 	bl	800150c <Scheduler_Add_Task>
		}
	}
}
 80016f8:	bf00      	nop
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001700:	20000178 	.word	0x20000178

08001704 <Scheduler_Remove_Task>:

uint8_t Scheduler_Remove_Task( uint32_t TaskID) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
    if (TaskID != NOT_VALID_TASK_ID)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d033      	beq.n	800177a <Scheduler_Remove_Task+0x76>
    {
        TaskNode *temp_task;
        TaskNode *preTask = NULL;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
        uint8_t taskIndex = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	73fb      	strb	r3, [r7, #15]
        for (taskIndex = 0, temp_task = tasks.currentTask; 
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <Scheduler_Remove_Task+0x80>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	e024      	b.n	8001770 <Scheduler_Remove_Task+0x6c>
             taskIndex < tasks.nTasks; taskIndex++, 
             preTask = temp_task, temp_task = temp_task->next) {
            if (temp_task->TaskID == TaskID) {
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	d117      	bne.n	8001760 <Scheduler_Remove_Task+0x5c>
                if (temp_task == tasks.currentTask) {
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <Scheduler_Remove_Task+0x80>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	429a      	cmp	r2, r3
 8001738:	d104      	bne.n	8001744 <Scheduler_Remove_Task+0x40>
                    tasks.currentTask = temp_task->next;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4a11      	ldr	r2, [pc, #68]	; (8001784 <Scheduler_Remove_Task+0x80>)
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e003      	b.n	800174c <Scheduler_Remove_Task+0x48>
                }
                else {
                    preTask->next = temp_task->next;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	605a      	str	r2, [r3, #4]
                }
                free(temp_task);
 800174c:	6978      	ldr	r0, [r7, #20]
 800174e:	f002 f9c1 	bl	8003ad4 <free>
                tasks.nTasks--;
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <Scheduler_Remove_Task+0x80>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <Scheduler_Remove_Task+0x80>)
 800175a:	6053      	str	r3, [r2, #4]
                return 1;
 800175c:	2301      	movs	r3, #1
 800175e:	e00d      	b.n	800177c <Scheduler_Remove_Task+0x78>
             taskIndex < tasks.nTasks; taskIndex++, 
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	3301      	adds	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
             preTask = temp_task, temp_task = temp_task->next) {
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	617b      	str	r3, [r7, #20]
             taskIndex < tasks.nTasks; taskIndex++, 
 8001770:	7bfa      	ldrb	r2, [r7, #15]
 8001772:	4b04      	ldr	r3, [pc, #16]	; (8001784 <Scheduler_Remove_Task+0x80>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	429a      	cmp	r2, r3
 8001778:	d3d5      	bcc.n	8001726 <Scheduler_Remove_Task+0x22>
            }
        }
    }
	return 0; // return status
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000178 	.word	0x20000178

08001788 <freq_to_tick>:

uint16_t freq_to_tick(uint16_t freq)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	80fb      	strh	r3, [r7, #6]
    uint16_t tick = FREQ_TO_TICK(freq);
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001798:	fb92 f3f3 	sdiv	r3, r2, r3
 800179c:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <freq_to_tick+0x38>)
 800179e:	fb82 1203 	smull	r1, r2, r2, r3
 80017a2:	1092      	asrs	r2, r2, #2
 80017a4:	17db      	asrs	r3, r3, #31
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	81fb      	strh	r3, [r7, #14]
    if (tick < 1)
 80017aa:	89fb      	ldrh	r3, [r7, #14]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <freq_to_tick+0x2c>
        tick = 1;
 80017b0:	2301      	movs	r3, #1
 80017b2:	81fb      	strh	r3, [r7, #14]
    return tick;
 80017b4:	89fb      	ldrh	r3, [r7, #14]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	66666667 	.word	0x66666667

080017c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_MspInit+0x5c>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	4a14      	ldr	r2, [pc, #80]	; (8001820 <HAL_MspInit+0x5c>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6193      	str	r3, [r2, #24]
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_MspInit+0x5c>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_MspInit+0x5c>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_MspInit+0x5c>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	61d3      	str	r3, [r2, #28]
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_MspInit+0x5c>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_MspInit+0x60>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	4a04      	ldr	r2, [pc, #16]	; (8001824 <HAL_MspInit+0x60>)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	40021000 	.word	0x40021000
 8001824:	40010000 	.word	0x40010000

08001828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <HAL_I2C_MspInit+0x90>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d132      	bne.n	80018ae <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <HAL_I2C_MspInit+0x94>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a1b      	ldr	r2, [pc, #108]	; (80018bc <HAL_I2C_MspInit+0x94>)
 800184e:	f043 0308 	orr.w	r3, r3, #8
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_I2C_MspInit+0x94>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001860:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001866:	2312      	movs	r3, #18
 8001868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800186a:	2303      	movs	r3, #3
 800186c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4812      	ldr	r0, [pc, #72]	; (80018c0 <HAL_I2C_MspInit+0x98>)
 8001876:	f000 fac5 	bl	8001e04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_I2C_MspInit+0x9c>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	f043 0302 	orr.w	r3, r3, #2
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
 8001890:	4a0c      	ldr	r2, [pc, #48]	; (80018c4 <HAL_I2C_MspInit+0x9c>)
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_I2C_MspInit+0x94>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	4a08      	ldr	r2, [pc, #32]	; (80018bc <HAL_I2C_MspInit+0x94>)
 800189c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a0:	61d3      	str	r3, [r2, #28]
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_I2C_MspInit+0x94>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	; 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40005400 	.word	0x40005400
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010c00 	.word	0x40010c00
 80018c4:	40010000 	.word	0x40010000

080018c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d8:	d113      	bne.n	8001902 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_TIM_Base_MspInit+0x44>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <HAL_TIM_Base_MspInit+0x44>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	61d3      	str	r3, [r2, #28]
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_TIM_Base_MspInit+0x44>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	201c      	movs	r0, #28
 80018f8:	f000 fa4d 	bl	8001d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018fc:	201c      	movs	r0, #28
 80018fe:	f000 fa66 	bl	8001dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000

08001910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <NMI_Handler+0x4>

08001916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <HardFault_Handler+0x4>

0800191c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <MemManage_Handler+0x4>

08001922 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <BusFault_Handler+0x4>

08001928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <UsageFault_Handler+0x4>

0800192e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001956:	f000 f907 	bl	8001b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <TIM2_IRQHandler+0x10>)
 8001966:	f001 fd5d 	bl	8003424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000130 	.word	0x20000130

08001974 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001978:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800197c:	f000 fbf6 	bl	800216c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <setTimer>:
#include "sw_timer.h"

uint32_t timer[MAX_TIMER];

void setTimer(uint8_t timerID, uint32_t time)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	71fb      	strb	r3, [r7, #7]
    if (timerID < 0 && timerID >= MAX_TIMER) return;
    timer[timerID] = time;
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	4904      	ldr	r1, [pc, #16]	; (80019a4 <setTimer+0x20>)
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000184 	.word	0x20000184

080019a8 <updateTimer>:

void updateTimer(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
    uint8_t i;
    for (i = 0; i < MAX_TIMER; i++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	71fb      	strb	r3, [r7, #7]
 80019b2:	e010      	b.n	80019d6 <updateTimer+0x2e>
    {
        if (timer[i] > 0)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <updateTimer+0x40>)
 80019b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <updateTimer+0x28>
            timer[i]--;
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <updateTimer+0x40>)
 80019c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019c8:	3a01      	subs	r2, #1
 80019ca:	4907      	ldr	r1, [pc, #28]	; (80019e8 <updateTimer+0x40>)
 80019cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (i = 0; i < MAX_TIMER; i++)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	3301      	adds	r3, #1
 80019d4:	71fb      	strb	r3, [r7, #7]
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	2b09      	cmp	r3, #9
 80019da:	d9eb      	bls.n	80019b4 <updateTimer+0xc>
    }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	20000184 	.word	0x20000184

080019ec <isTimerExpired>:

uint8_t isTimerExpired(uint8_t timerID)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
    if (timerID < 0 && timerID >= MAX_TIMER) return 0;
    if (timer[timerID] == 0)
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <isTimerExpired+0x28>)
 80019fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <isTimerExpired+0x1a>
        return 1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <isTimerExpired+0x1c>
    return 0;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000184 	.word	0x20000184

08001a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a20:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <_sbrk+0x5c>)
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <_sbrk+0x60>)
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <_sbrk+0x64>)
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <_sbrk+0x68>)
 8001a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d207      	bcs.n	8001a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a48:	f002 f930 	bl	8003cac <__errno>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	220c      	movs	r2, #12
 8001a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295
 8001a56:	e009      	b.n	8001a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <_sbrk+0x64>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <_sbrk+0x64>)
 8001a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20005000 	.word	0x20005000
 8001a78:	00000400 	.word	0x00000400
 8001a7c:	200001ac 	.word	0x200001ac
 8001a80:	20000300 	.word	0x20000300

08001a84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a90:	f7ff fff8 	bl	8001a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a94:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a96:	490c      	ldr	r1, [pc, #48]	; (8001ac8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a98:	4a0c      	ldr	r2, [pc, #48]	; (8001acc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001aac:	4c09      	ldr	r4, [pc, #36]	; (8001ad4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aba:	f002 f8fd 	bl	8003cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001abe:	f7ff fb29 	bl	8001114 <main>
  bx lr
 8001ac2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac8:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001acc:	0800454c 	.word	0x0800454c
  ldr r2, =_sbss
 8001ad0:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001ad4:	200002fc 	.word	0x200002fc

08001ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC1_2_IRQHandler>
	...

08001adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_Init+0x28>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_Init+0x28>)
 8001ae6:	f043 0310 	orr.w	r3, r3, #16
 8001aea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aec:	2003      	movs	r0, #3
 8001aee:	f000 f947 	bl	8001d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af2:	2000      	movs	r0, #0
 8001af4:	f000 f808 	bl	8001b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af8:	f7ff fe64 	bl	80017c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40022000 	.word	0x40022000

08001b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_InitTick+0x54>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_InitTick+0x58>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f95f 	bl	8001dea <HAL_SYSTICK_Config>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00e      	b.n	8001b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d80a      	bhi.n	8001b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f000 f927 	bl	8001d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b48:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <HAL_InitTick+0x5c>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000040 	.word	0x20000040
 8001b60:	20000048 	.word	0x20000048
 8001b64:	20000044 	.word	0x20000044

08001b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_IncTick+0x1c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_IncTick+0x20>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a03      	ldr	r2, [pc, #12]	; (8001b88 <HAL_IncTick+0x20>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	20000048 	.word	0x20000048
 8001b88:	200001b0 	.word	0x200001b0

08001b8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b02      	ldr	r3, [pc, #8]	; (8001b9c <HAL_GetTick+0x10>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	200001b0 	.word	0x200001b0

08001ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff fff0 	bl	8001b8c <HAL_GetTick>
 8001bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb8:	d005      	beq.n	8001bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_Delay+0x44>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bc6:	bf00      	nop
 8001bc8:	f7ff ffe0 	bl	8001b8c <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8f7      	bhi.n	8001bc8 <HAL_Delay+0x28>
  {
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000048 	.word	0x20000048

08001be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4906      	ldr	r1, [pc, #24]	; (8001c80 <__NVIC_EnableIRQ+0x34>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0a      	blt.n	8001cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	490c      	ldr	r1, [pc, #48]	; (8001cd0 <__NVIC_SetPriority+0x4c>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	0112      	lsls	r2, r2, #4
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cac:	e00a      	b.n	8001cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4908      	ldr	r1, [pc, #32]	; (8001cd4 <__NVIC_SetPriority+0x50>)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	3b04      	subs	r3, #4
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	761a      	strb	r2, [r3, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f1c3 0307 	rsb	r3, r3, #7
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	bf28      	it	cs
 8001cf6:	2304      	movcs	r3, #4
 8001cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d902      	bls.n	8001d08 <NVIC_EncodePriority+0x30>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	e000      	b.n	8001d0a <NVIC_EncodePriority+0x32>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	4313      	orrs	r3, r2
         );
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d4c:	d301      	bcc.n	8001d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00f      	b.n	8001d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <SysTick_Config+0x40>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5a:	210f      	movs	r1, #15
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f7ff ff90 	bl	8001c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <SysTick_Config+0x40>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <SysTick_Config+0x40>)
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	e000e010 	.word	0xe000e010

08001d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff2d 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da8:	f7ff ff42 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	6978      	ldr	r0, [r7, #20]
 8001db4:	f7ff ff90 	bl	8001cd8 <NVIC_EncodePriority>
 8001db8:	4602      	mov	r2, r0
 8001dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff5f 	bl	8001c84 <__NVIC_SetPriority>
}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff35 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff ffa2 	bl	8001d3c <SysTick_Config>
 8001df8:	4603      	mov	r3, r0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b08b      	sub	sp, #44	; 0x2c
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e16:	e169      	b.n	80020ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e18:	2201      	movs	r2, #1
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	f040 8158 	bne.w	80020e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4a9a      	ldr	r2, [pc, #616]	; (80020a4 <HAL_GPIO_Init+0x2a0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d05e      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e40:	4a98      	ldr	r2, [pc, #608]	; (80020a4 <HAL_GPIO_Init+0x2a0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d875      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e46:	4a98      	ldr	r2, [pc, #608]	; (80020a8 <HAL_GPIO_Init+0x2a4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d058      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e4c:	4a96      	ldr	r2, [pc, #600]	; (80020a8 <HAL_GPIO_Init+0x2a4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d86f      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e52:	4a96      	ldr	r2, [pc, #600]	; (80020ac <HAL_GPIO_Init+0x2a8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d052      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e58:	4a94      	ldr	r2, [pc, #592]	; (80020ac <HAL_GPIO_Init+0x2a8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d869      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e5e:	4a94      	ldr	r2, [pc, #592]	; (80020b0 <HAL_GPIO_Init+0x2ac>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d04c      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e64:	4a92      	ldr	r2, [pc, #584]	; (80020b0 <HAL_GPIO_Init+0x2ac>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d863      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e6a:	4a92      	ldr	r2, [pc, #584]	; (80020b4 <HAL_GPIO_Init+0x2b0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d046      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e70:	4a90      	ldr	r2, [pc, #576]	; (80020b4 <HAL_GPIO_Init+0x2b0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d85d      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e76:	2b12      	cmp	r3, #18
 8001e78:	d82a      	bhi.n	8001ed0 <HAL_GPIO_Init+0xcc>
 8001e7a:	2b12      	cmp	r3, #18
 8001e7c:	d859      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e7e:	a201      	add	r2, pc, #4	; (adr r2, 8001e84 <HAL_GPIO_Init+0x80>)
 8001e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e84:	08001eff 	.word	0x08001eff
 8001e88:	08001ed9 	.word	0x08001ed9
 8001e8c:	08001eeb 	.word	0x08001eeb
 8001e90:	08001f2d 	.word	0x08001f2d
 8001e94:	08001f33 	.word	0x08001f33
 8001e98:	08001f33 	.word	0x08001f33
 8001e9c:	08001f33 	.word	0x08001f33
 8001ea0:	08001f33 	.word	0x08001f33
 8001ea4:	08001f33 	.word	0x08001f33
 8001ea8:	08001f33 	.word	0x08001f33
 8001eac:	08001f33 	.word	0x08001f33
 8001eb0:	08001f33 	.word	0x08001f33
 8001eb4:	08001f33 	.word	0x08001f33
 8001eb8:	08001f33 	.word	0x08001f33
 8001ebc:	08001f33 	.word	0x08001f33
 8001ec0:	08001f33 	.word	0x08001f33
 8001ec4:	08001f33 	.word	0x08001f33
 8001ec8:	08001ee1 	.word	0x08001ee1
 8001ecc:	08001ef5 	.word	0x08001ef5
 8001ed0:	4a79      	ldr	r2, [pc, #484]	; (80020b8 <HAL_GPIO_Init+0x2b4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d013      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ed6:	e02c      	b.n	8001f32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	623b      	str	r3, [r7, #32]
          break;
 8001ede:	e029      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	623b      	str	r3, [r7, #32]
          break;
 8001ee8:	e024      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	3308      	adds	r3, #8
 8001ef0:	623b      	str	r3, [r7, #32]
          break;
 8001ef2:	e01f      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	330c      	adds	r3, #12
 8001efa:	623b      	str	r3, [r7, #32]
          break;
 8001efc:	e01a      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d102      	bne.n	8001f0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f06:	2304      	movs	r3, #4
 8001f08:	623b      	str	r3, [r7, #32]
          break;
 8001f0a:	e013      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d105      	bne.n	8001f20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f14:	2308      	movs	r3, #8
 8001f16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	611a      	str	r2, [r3, #16]
          break;
 8001f1e:	e009      	b.n	8001f34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f20:	2308      	movs	r3, #8
 8001f22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	615a      	str	r2, [r3, #20]
          break;
 8001f2a:	e003      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	623b      	str	r3, [r7, #32]
          break;
 8001f30:	e000      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          break;
 8001f32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2bff      	cmp	r3, #255	; 0xff
 8001f38:	d801      	bhi.n	8001f3e <HAL_GPIO_Init+0x13a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	e001      	b.n	8001f42 <HAL_GPIO_Init+0x13e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3304      	adds	r3, #4
 8001f42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2bff      	cmp	r3, #255	; 0xff
 8001f48:	d802      	bhi.n	8001f50 <HAL_GPIO_Init+0x14c>
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	e002      	b.n	8001f56 <HAL_GPIO_Init+0x152>
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	3b08      	subs	r3, #8
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	210f      	movs	r1, #15
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	401a      	ands	r2, r3
 8001f68:	6a39      	ldr	r1, [r7, #32]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	431a      	orrs	r2, r3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 80b1 	beq.w	80020e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f84:	4b4d      	ldr	r3, [pc, #308]	; (80020bc <HAL_GPIO_Init+0x2b8>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a4c      	ldr	r2, [pc, #304]	; (80020bc <HAL_GPIO_Init+0x2b8>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <HAL_GPIO_Init+0x2b8>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f9c:	4a48      	ldr	r2, [pc, #288]	; (80020c0 <HAL_GPIO_Init+0x2bc>)
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a40      	ldr	r2, [pc, #256]	; (80020c4 <HAL_GPIO_Init+0x2c0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d013      	beq.n	8001ff0 <HAL_GPIO_Init+0x1ec>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a3f      	ldr	r2, [pc, #252]	; (80020c8 <HAL_GPIO_Init+0x2c4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00d      	beq.n	8001fec <HAL_GPIO_Init+0x1e8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a3e      	ldr	r2, [pc, #248]	; (80020cc <HAL_GPIO_Init+0x2c8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d007      	beq.n	8001fe8 <HAL_GPIO_Init+0x1e4>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a3d      	ldr	r2, [pc, #244]	; (80020d0 <HAL_GPIO_Init+0x2cc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d101      	bne.n	8001fe4 <HAL_GPIO_Init+0x1e0>
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e006      	b.n	8001ff2 <HAL_GPIO_Init+0x1ee>
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	e004      	b.n	8001ff2 <HAL_GPIO_Init+0x1ee>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e002      	b.n	8001ff2 <HAL_GPIO_Init+0x1ee>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_GPIO_Init+0x1ee>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff4:	f002 0203 	and.w	r2, r2, #3
 8001ff8:	0092      	lsls	r2, r2, #2
 8001ffa:	4093      	lsls	r3, r2
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002002:	492f      	ldr	r1, [pc, #188]	; (80020c0 <HAL_GPIO_Init+0x2bc>)
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3302      	adds	r3, #2
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800201c:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	492c      	ldr	r1, [pc, #176]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	608b      	str	r3, [r1, #8]
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800202a:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	43db      	mvns	r3, r3
 8002032:	4928      	ldr	r1, [pc, #160]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002034:	4013      	ands	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d006      	beq.n	8002052 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002044:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	4922      	ldr	r1, [pc, #136]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	60cb      	str	r3, [r1, #12]
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002052:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	43db      	mvns	r3, r3
 800205a:	491e      	ldr	r1, [pc, #120]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 800205c:	4013      	ands	r3, r2
 800205e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	4918      	ldr	r1, [pc, #96]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
 8002078:	e006      	b.n	8002088 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800207a:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	43db      	mvns	r3, r3
 8002082:	4914      	ldr	r1, [pc, #80]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002084:	4013      	ands	r3, r2
 8002086:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d021      	beq.n	80020d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	490e      	ldr	r1, [pc, #56]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	600b      	str	r3, [r1, #0]
 80020a0:	e021      	b.n	80020e6 <HAL_GPIO_Init+0x2e2>
 80020a2:	bf00      	nop
 80020a4:	10320000 	.word	0x10320000
 80020a8:	10310000 	.word	0x10310000
 80020ac:	10220000 	.word	0x10220000
 80020b0:	10210000 	.word	0x10210000
 80020b4:	10120000 	.word	0x10120000
 80020b8:	10110000 	.word	0x10110000
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40010000 	.word	0x40010000
 80020c4:	40010800 	.word	0x40010800
 80020c8:	40010c00 	.word	0x40010c00
 80020cc:	40011000 	.word	0x40011000
 80020d0:	40011400 	.word	0x40011400
 80020d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_GPIO_Init+0x304>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	43db      	mvns	r3, r3
 80020e0:	4909      	ldr	r1, [pc, #36]	; (8002108 <HAL_GPIO_Init+0x304>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	3301      	adds	r3, #1
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	fa22 f303 	lsr.w	r3, r2, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f47f ae8e 	bne.w	8001e18 <HAL_GPIO_Init+0x14>
  }
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	372c      	adds	r7, #44	; 0x2c
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	40010400 	.word	0x40010400

0800210c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	887b      	ldrh	r3, [r7, #2]
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	e001      	b.n	800212e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800212e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr

0800213a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	807b      	strh	r3, [r7, #2]
 8002146:	4613      	mov	r3, r2
 8002148:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800214a:	787b      	ldrb	r3, [r7, #1]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002150:	887a      	ldrh	r2, [r7, #2]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002156:	e003      	b.n	8002160 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002158:	887b      	ldrh	r3, [r7, #2]
 800215a:	041a      	lsls	r2, r3, #16
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	611a      	str	r2, [r3, #16]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
	...

0800216c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f806 	bl	800219c <HAL_GPIO_EXTI_Callback>
  }
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40010400 	.word	0x40010400

0800219c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e12b      	b.n	800241a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff fb26 	bl	8001828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2224      	movs	r2, #36	; 0x24
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002202:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002212:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002214:	f001 f832 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 8002218:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4a81      	ldr	r2, [pc, #516]	; (8002424 <HAL_I2C_Init+0x274>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d807      	bhi.n	8002234 <HAL_I2C_Init+0x84>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4a80      	ldr	r2, [pc, #512]	; (8002428 <HAL_I2C_Init+0x278>)
 8002228:	4293      	cmp	r3, r2
 800222a:	bf94      	ite	ls
 800222c:	2301      	movls	r3, #1
 800222e:	2300      	movhi	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	e006      	b.n	8002242 <HAL_I2C_Init+0x92>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4a7d      	ldr	r2, [pc, #500]	; (800242c <HAL_I2C_Init+0x27c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	bf94      	ite	ls
 800223c:	2301      	movls	r3, #1
 800223e:	2300      	movhi	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e0e7      	b.n	800241a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4a78      	ldr	r2, [pc, #480]	; (8002430 <HAL_I2C_Init+0x280>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	0c9b      	lsrs	r3, r3, #18
 8002254:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	430a      	orrs	r2, r1
 8002268:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	4a6a      	ldr	r2, [pc, #424]	; (8002424 <HAL_I2C_Init+0x274>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d802      	bhi.n	8002284 <HAL_I2C_Init+0xd4>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	3301      	adds	r3, #1
 8002282:	e009      	b.n	8002298 <HAL_I2C_Init+0xe8>
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800228a:	fb02 f303 	mul.w	r3, r2, r3
 800228e:	4a69      	ldr	r2, [pc, #420]	; (8002434 <HAL_I2C_Init+0x284>)
 8002290:	fba2 2303 	umull	r2, r3, r2, r3
 8002294:	099b      	lsrs	r3, r3, #6
 8002296:	3301      	adds	r3, #1
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	430b      	orrs	r3, r1
 800229e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	495c      	ldr	r1, [pc, #368]	; (8002424 <HAL_I2C_Init+0x274>)
 80022b4:	428b      	cmp	r3, r1
 80022b6:	d819      	bhi.n	80022ec <HAL_I2C_Init+0x13c>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1e59      	subs	r1, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80022c6:	1c59      	adds	r1, r3, #1
 80022c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022cc:	400b      	ands	r3, r1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_I2C_Init+0x138>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1e59      	subs	r1, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80022e0:	3301      	adds	r3, #1
 80022e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e6:	e051      	b.n	800238c <HAL_I2C_Init+0x1dc>
 80022e8:	2304      	movs	r3, #4
 80022ea:	e04f      	b.n	800238c <HAL_I2C_Init+0x1dc>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d111      	bne.n	8002318 <HAL_I2C_Init+0x168>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1e58      	subs	r0, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	440b      	add	r3, r1
 8002302:	fbb0 f3f3 	udiv	r3, r0, r3
 8002306:	3301      	adds	r3, #1
 8002308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	e012      	b.n	800233e <HAL_I2C_Init+0x18e>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1e58      	subs	r0, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	0099      	lsls	r1, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	fbb0 f3f3 	udiv	r3, r0, r3
 800232e:	3301      	adds	r3, #1
 8002330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Init+0x196>
 8002342:	2301      	movs	r3, #1
 8002344:	e022      	b.n	800238c <HAL_I2C_Init+0x1dc>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10e      	bne.n	800236c <HAL_I2C_Init+0x1bc>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1e58      	subs	r0, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6859      	ldr	r1, [r3, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	440b      	add	r3, r1
 800235c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002360:	3301      	adds	r3, #1
 8002362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236a:	e00f      	b.n	800238c <HAL_I2C_Init+0x1dc>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1e58      	subs	r0, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	0099      	lsls	r1, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002382:	3301      	adds	r3, #1
 8002384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	6809      	ldr	r1, [r1, #0]
 8002390:	4313      	orrs	r3, r2
 8002392:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69da      	ldr	r2, [r3, #28]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6911      	ldr	r1, [r2, #16]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68d2      	ldr	r2, [r2, #12]
 80023c6:	4311      	orrs	r1, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	430b      	orrs	r3, r1
 80023ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695a      	ldr	r2, [r3, #20]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	000186a0 	.word	0x000186a0
 8002428:	001e847f 	.word	0x001e847f
 800242c:	003d08ff 	.word	0x003d08ff
 8002430:	431bde83 	.word	0x431bde83
 8002434:	10624dd3 	.word	0x10624dd3

08002438 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af02      	add	r7, sp, #8
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	461a      	mov	r2, r3
 8002444:	460b      	mov	r3, r1
 8002446:	817b      	strh	r3, [r7, #10]
 8002448:	4613      	mov	r3, r2
 800244a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800244c:	f7ff fb9e 	bl	8001b8c <HAL_GetTick>
 8002450:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b20      	cmp	r3, #32
 800245c:	f040 80e0 	bne.w	8002620 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	2319      	movs	r3, #25
 8002466:	2201      	movs	r2, #1
 8002468:	4970      	ldr	r1, [pc, #448]	; (800262c <HAL_I2C_Master_Transmit+0x1f4>)
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f964 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002476:	2302      	movs	r3, #2
 8002478:	e0d3      	b.n	8002622 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_I2C_Master_Transmit+0x50>
 8002484:	2302      	movs	r3, #2
 8002486:	e0cc      	b.n	8002622 <HAL_I2C_Master_Transmit+0x1ea>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b01      	cmp	r3, #1
 800249c:	d007      	beq.n	80024ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2221      	movs	r2, #33	; 0x21
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2210      	movs	r2, #16
 80024ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	893a      	ldrh	r2, [r7, #8]
 80024de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4a50      	ldr	r2, [pc, #320]	; (8002630 <HAL_I2C_Master_Transmit+0x1f8>)
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024f0:	8979      	ldrh	r1, [r7, #10]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	6a3a      	ldr	r2, [r7, #32]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f89c 	bl	8002634 <I2C_MasterRequestWrite>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e08d      	b.n	8002622 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800251c:	e066      	b.n	80025ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	6a39      	ldr	r1, [r7, #32]
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 fa22 	bl	800296c <I2C_WaitOnTXEFlagUntilTimeout>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00d      	beq.n	800254a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	2b04      	cmp	r3, #4
 8002534:	d107      	bne.n	8002546 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002544:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e06b      	b.n	8002622 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b04      	cmp	r3, #4
 8002586:	d11b      	bne.n	80025c0 <HAL_I2C_Master_Transmit+0x188>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	d017      	beq.n	80025c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	781a      	ldrb	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	6a39      	ldr	r1, [r7, #32]
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 fa19 	bl	80029fc <I2C_WaitOnBTFFlagUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00d      	beq.n	80025ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d107      	bne.n	80025e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e01a      	b.n	8002622 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d194      	bne.n	800251e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	e000      	b.n	8002622 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002620:	2302      	movs	r3, #2
  }
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	00100002 	.word	0x00100002
 8002630:	ffff0000 	.word	0xffff0000

08002634 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	460b      	mov	r3, r1
 8002642:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b08      	cmp	r3, #8
 800264e:	d006      	beq.n	800265e <I2C_MasterRequestWrite+0x2a>
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d003      	beq.n	800265e <I2C_MasterRequestWrite+0x2a>
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800265c:	d108      	bne.n	8002670 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	e00b      	b.n	8002688 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	2b12      	cmp	r3, #18
 8002676:	d107      	bne.n	8002688 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002686:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f84f 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00d      	beq.n	80026bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ae:	d103      	bne.n	80026b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e035      	b.n	8002728 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026c4:	d108      	bne.n	80026d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026c6:	897b      	ldrh	r3, [r7, #10]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	461a      	mov	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026d4:	611a      	str	r2, [r3, #16]
 80026d6:	e01b      	b.n	8002710 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026d8:	897b      	ldrh	r3, [r7, #10]
 80026da:	11db      	asrs	r3, r3, #7
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f003 0306 	and.w	r3, r3, #6
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	f063 030f 	orn	r3, r3, #15
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	490e      	ldr	r1, [pc, #56]	; (8002730 <I2C_MasterRequestWrite+0xfc>)
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f898 	bl	800282c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e010      	b.n	8002728 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002706:	897b      	ldrh	r3, [r7, #10]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4907      	ldr	r1, [pc, #28]	; (8002734 <I2C_MasterRequestWrite+0x100>)
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f888 	bl	800282c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	00010008 	.word	0x00010008
 8002734:	00010002 	.word	0x00010002

08002738 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002748:	e048      	b.n	80027dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d044      	beq.n	80027dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002752:	f7ff fa1b 	bl	8001b8c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d302      	bcc.n	8002768 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d139      	bne.n	80027dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	0c1b      	lsrs	r3, r3, #16
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b01      	cmp	r3, #1
 8002770:	d10d      	bne.n	800278e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	43da      	mvns	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	4013      	ands	r3, r2
 800277e:	b29b      	uxth	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	e00c      	b.n	80027a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	43da      	mvns	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	4013      	ands	r3, r2
 800279a:	b29b      	uxth	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf0c      	ite	eq
 80027a0:	2301      	moveq	r3, #1
 80027a2:	2300      	movne	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d116      	bne.n	80027dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f043 0220 	orr.w	r2, r3, #32
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e023      	b.n	8002824 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	0c1b      	lsrs	r3, r3, #16
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d10d      	bne.n	8002802 <I2C_WaitOnFlagUntilTimeout+0xca>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	43da      	mvns	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	4013      	ands	r3, r2
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bf0c      	ite	eq
 80027f8:	2301      	moveq	r3, #1
 80027fa:	2300      	movne	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	461a      	mov	r2, r3
 8002800:	e00c      	b.n	800281c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	43da      	mvns	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	4013      	ands	r3, r2
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf0c      	ite	eq
 8002814:	2301      	moveq	r3, #1
 8002816:	2300      	movne	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	429a      	cmp	r2, r3
 8002820:	d093      	beq.n	800274a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800283a:	e071      	b.n	8002920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284a:	d123      	bne.n	8002894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800285a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002864:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f043 0204 	orr.w	r2, r3, #4
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e067      	b.n	8002964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289a:	d041      	beq.n	8002920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289c:	f7ff f976 	bl	8001b8c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d302      	bcc.n	80028b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d136      	bne.n	8002920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	0c1b      	lsrs	r3, r3, #16
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d10c      	bne.n	80028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	43da      	mvns	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	4013      	ands	r3, r2
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	bf14      	ite	ne
 80028ce:	2301      	movne	r3, #1
 80028d0:	2300      	moveq	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	e00b      	b.n	80028ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	43da      	mvns	r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4013      	ands	r3, r2
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	bf14      	ite	ne
 80028e8:	2301      	movne	r3, #1
 80028ea:	2300      	moveq	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d016      	beq.n	8002920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f043 0220 	orr.w	r2, r3, #32
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e021      	b.n	8002964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	0c1b      	lsrs	r3, r3, #16
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b01      	cmp	r3, #1
 8002928:	d10c      	bne.n	8002944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	43da      	mvns	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	4013      	ands	r3, r2
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf14      	ite	ne
 800293c:	2301      	movne	r3, #1
 800293e:	2300      	moveq	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	e00b      	b.n	800295c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	43da      	mvns	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4013      	ands	r3, r2
 8002950:	b29b      	uxth	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	bf14      	ite	ne
 8002956:	2301      	movne	r3, #1
 8002958:	2300      	moveq	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	f47f af6d 	bne.w	800283c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002978:	e034      	b.n	80029e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 f886 	bl	8002a8c <I2C_IsAcknowledgeFailed>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e034      	b.n	80029f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002990:	d028      	beq.n	80029e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002992:	f7ff f8fb 	bl	8001b8c <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d302      	bcc.n	80029a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d11d      	bne.n	80029e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b2:	2b80      	cmp	r3, #128	; 0x80
 80029b4:	d016      	beq.n	80029e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	f043 0220 	orr.w	r2, r3, #32
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e007      	b.n	80029f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ee:	2b80      	cmp	r3, #128	; 0x80
 80029f0:	d1c3      	bne.n	800297a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a08:	e034      	b.n	8002a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f83e 	bl	8002a8c <I2C_IsAcknowledgeFailed>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e034      	b.n	8002a84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a20:	d028      	beq.n	8002a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a22:	f7ff f8b3 	bl	8001b8c <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d302      	bcc.n	8002a38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d11d      	bne.n	8002a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d016      	beq.n	8002a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f043 0220 	orr.w	r2, r3, #32
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e007      	b.n	8002a84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d1c3      	bne.n	8002a0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa2:	d11b      	bne.n	8002adc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002aac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	f043 0204 	orr.w	r2, r3, #4
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e272      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8087 	beq.w	8002c16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b08:	4b92      	ldr	r3, [pc, #584]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d00c      	beq.n	8002b2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b14:	4b8f      	ldr	r3, [pc, #572]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 030c 	and.w	r3, r3, #12
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d112      	bne.n	8002b46 <HAL_RCC_OscConfig+0x5e>
 8002b20:	4b8c      	ldr	r3, [pc, #560]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2c:	d10b      	bne.n	8002b46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2e:	4b89      	ldr	r3, [pc, #548]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d06c      	beq.n	8002c14 <HAL_RCC_OscConfig+0x12c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d168      	bne.n	8002c14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e24c      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCC_OscConfig+0x76>
 8002b50:	4b80      	ldr	r3, [pc, #512]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a7f      	ldr	r2, [pc, #508]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	e02e      	b.n	8002bbc <HAL_RCC_OscConfig+0xd4>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x98>
 8002b66:	4b7b      	ldr	r3, [pc, #492]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a7a      	ldr	r2, [pc, #488]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	4b78      	ldr	r3, [pc, #480]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a77      	ldr	r2, [pc, #476]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	e01d      	b.n	8002bbc <HAL_RCC_OscConfig+0xd4>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0xbc>
 8002b8a:	4b72      	ldr	r3, [pc, #456]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a71      	ldr	r2, [pc, #452]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	4b6f      	ldr	r3, [pc, #444]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a6e      	ldr	r2, [pc, #440]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e00b      	b.n	8002bbc <HAL_RCC_OscConfig+0xd4>
 8002ba4:	4b6b      	ldr	r3, [pc, #428]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a6a      	ldr	r2, [pc, #424]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b68      	ldr	r3, [pc, #416]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a67      	ldr	r2, [pc, #412]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d013      	beq.n	8002bec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7fe ffe2 	bl	8001b8c <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bcc:	f7fe ffde 	bl	8001b8c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	; 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e200      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	4b5d      	ldr	r3, [pc, #372]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0xe4>
 8002bea:	e014      	b.n	8002c16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7fe ffce 	bl	8001b8c <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf4:	f7fe ffca 	bl	8001b8c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e1ec      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c06:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x10c>
 8002c12:	e000      	b.n	8002c16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d063      	beq.n	8002cea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c22:	4b4c      	ldr	r3, [pc, #304]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c2e:	4b49      	ldr	r3, [pc, #292]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d11c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x18c>
 8002c3a:	4b46      	ldr	r3, [pc, #280]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d116      	bne.n	8002c74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c46:	4b43      	ldr	r3, [pc, #268]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_RCC_OscConfig+0x176>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e1c0      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5e:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4939      	ldr	r1, [pc, #228]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c72:	e03a      	b.n	8002cea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d020      	beq.n	8002cbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c7c:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7fe ff83 	bl	8001b8c <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c8a:	f7fe ff7f 	bl	8001b8c <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e1a1      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9c:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca8:	4b2a      	ldr	r3, [pc, #168]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4927      	ldr	r1, [pc, #156]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]
 8002cbc:	e015      	b.n	8002cea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cbe:	4b26      	ldr	r3, [pc, #152]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7fe ff62 	bl	8001b8c <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ccc:	f7fe ff5e 	bl	8001b8c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e180      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cde:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d03a      	beq.n	8002d6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d019      	beq.n	8002d32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cfe:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d04:	f7fe ff42 	bl	8001b8c <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0c:	f7fe ff3e 	bl	8001b8c <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e160      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	f000 faba 	bl	80032a4 <RCC_Delay>
 8002d30:	e01c      	b.n	8002d6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d38:	f7fe ff28 	bl	8001b8c <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d3e:	e00f      	b.n	8002d60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d40:	f7fe ff24 	bl	8001b8c <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d908      	bls.n	8002d60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e146      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	42420000 	.word	0x42420000
 8002d5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d60:	4b92      	ldr	r3, [pc, #584]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e9      	bne.n	8002d40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80a6 	beq.w	8002ec6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7e:	4b8b      	ldr	r3, [pc, #556]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10d      	bne.n	8002da6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8a:	4b88      	ldr	r3, [pc, #544]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	4a87      	ldr	r2, [pc, #540]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d94:	61d3      	str	r3, [r2, #28]
 8002d96:	4b85      	ldr	r3, [pc, #532]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da2:	2301      	movs	r3, #1
 8002da4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da6:	4b82      	ldr	r3, [pc, #520]	; (8002fb0 <HAL_RCC_OscConfig+0x4c8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d118      	bne.n	8002de4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002db2:	4b7f      	ldr	r3, [pc, #508]	; (8002fb0 <HAL_RCC_OscConfig+0x4c8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a7e      	ldr	r2, [pc, #504]	; (8002fb0 <HAL_RCC_OscConfig+0x4c8>)
 8002db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dbe:	f7fe fee5 	bl	8001b8c <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc6:	f7fe fee1 	bl	8001b8c <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b64      	cmp	r3, #100	; 0x64
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e103      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd8:	4b75      	ldr	r3, [pc, #468]	; (8002fb0 <HAL_RCC_OscConfig+0x4c8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d106      	bne.n	8002dfa <HAL_RCC_OscConfig+0x312>
 8002dec:	4b6f      	ldr	r3, [pc, #444]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4a6e      	ldr	r2, [pc, #440]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	6213      	str	r3, [r2, #32]
 8002df8:	e02d      	b.n	8002e56 <HAL_RCC_OscConfig+0x36e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCC_OscConfig+0x334>
 8002e02:	4b6a      	ldr	r3, [pc, #424]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	4a69      	ldr	r2, [pc, #420]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6213      	str	r3, [r2, #32]
 8002e0e:	4b67      	ldr	r3, [pc, #412]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4a66      	ldr	r2, [pc, #408]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e14:	f023 0304 	bic.w	r3, r3, #4
 8002e18:	6213      	str	r3, [r2, #32]
 8002e1a:	e01c      	b.n	8002e56 <HAL_RCC_OscConfig+0x36e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b05      	cmp	r3, #5
 8002e22:	d10c      	bne.n	8002e3e <HAL_RCC_OscConfig+0x356>
 8002e24:	4b61      	ldr	r3, [pc, #388]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4a60      	ldr	r2, [pc, #384]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e2a:	f043 0304 	orr.w	r3, r3, #4
 8002e2e:	6213      	str	r3, [r2, #32]
 8002e30:	4b5e      	ldr	r3, [pc, #376]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4a5d      	ldr	r2, [pc, #372]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	6213      	str	r3, [r2, #32]
 8002e3c:	e00b      	b.n	8002e56 <HAL_RCC_OscConfig+0x36e>
 8002e3e:	4b5b      	ldr	r3, [pc, #364]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	4a5a      	ldr	r2, [pc, #360]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	6213      	str	r3, [r2, #32]
 8002e4a:	4b58      	ldr	r3, [pc, #352]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4a57      	ldr	r2, [pc, #348]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	f023 0304 	bic.w	r3, r3, #4
 8002e54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d015      	beq.n	8002e8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5e:	f7fe fe95 	bl	8001b8c <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e64:	e00a      	b.n	8002e7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e66:	f7fe fe91 	bl	8001b8c <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e0b1      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7c:	4b4b      	ldr	r3, [pc, #300]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0ee      	beq.n	8002e66 <HAL_RCC_OscConfig+0x37e>
 8002e88:	e014      	b.n	8002eb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8a:	f7fe fe7f 	bl	8001b8c <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e90:	e00a      	b.n	8002ea8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e92:	f7fe fe7b 	bl	8001b8c <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e09b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea8:	4b40      	ldr	r3, [pc, #256]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1ee      	bne.n	8002e92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d105      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eba:	4b3c      	ldr	r3, [pc, #240]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	4a3b      	ldr	r2, [pc, #236]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8087 	beq.w	8002fde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ed0:	4b36      	ldr	r3, [pc, #216]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d061      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d146      	bne.n	8002f72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee4:	4b33      	ldr	r3, [pc, #204]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7fe fe4f 	bl	8001b8c <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef2:	f7fe fe4b 	bl	8001b8c <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e06d      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f04:	4b29      	ldr	r3, [pc, #164]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1f0      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f18:	d108      	bne.n	8002f2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f1a:	4b24      	ldr	r3, [pc, #144]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	4921      	ldr	r1, [pc, #132]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a19      	ldr	r1, [r3, #32]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	491b      	ldr	r1, [pc, #108]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f44:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4a:	f7fe fe1f 	bl	8001b8c <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f52:	f7fe fe1b 	bl	8001b8c <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e03d      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x46a>
 8002f70:	e035      	b.n	8002fde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <HAL_RCC_OscConfig+0x4cc>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7fe fe08 	bl	8001b8c <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f80:	f7fe fe04 	bl	8001b8c <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e026      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_RCC_OscConfig+0x4c4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x498>
 8002f9e:	e01e      	b.n	8002fde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e019      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40007000 	.word	0x40007000
 8002fb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_RCC_OscConfig+0x500>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d001      	beq.n	8002fde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000

08002fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0d0      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003000:	4b6a      	ldr	r3, [pc, #424]	; (80031ac <HAL_RCC_ClockConfig+0x1c0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d910      	bls.n	8003030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b67      	ldr	r3, [pc, #412]	; (80031ac <HAL_RCC_ClockConfig+0x1c0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 0207 	bic.w	r2, r3, #7
 8003016:	4965      	ldr	r1, [pc, #404]	; (80031ac <HAL_RCC_ClockConfig+0x1c0>)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b63      	ldr	r3, [pc, #396]	; (80031ac <HAL_RCC_ClockConfig+0x1c0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0b8      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d020      	beq.n	800307e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003048:	4b59      	ldr	r3, [pc, #356]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4a58      	ldr	r2, [pc, #352]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 800304e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003052:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003060:	4b53      	ldr	r3, [pc, #332]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	4a52      	ldr	r2, [pc, #328]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003066:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800306a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b50      	ldr	r3, [pc, #320]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	494d      	ldr	r1, [pc, #308]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 800307a:	4313      	orrs	r3, r2
 800307c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d040      	beq.n	800310c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d107      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003092:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d115      	bne.n	80030ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e07f      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d107      	bne.n	80030ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030aa:	4b41      	ldr	r3, [pc, #260]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e073      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ba:	4b3d      	ldr	r3, [pc, #244]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e06b      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ca:	4b39      	ldr	r3, [pc, #228]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f023 0203 	bic.w	r2, r3, #3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4936      	ldr	r1, [pc, #216]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030dc:	f7fe fd56 	bl	8001b8c <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e4:	f7fe fd52 	bl	8001b8c <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e053      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fa:	4b2d      	ldr	r3, [pc, #180]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 020c 	and.w	r2, r3, #12
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	429a      	cmp	r2, r3
 800310a:	d1eb      	bne.n	80030e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800310c:	4b27      	ldr	r3, [pc, #156]	; (80031ac <HAL_RCC_ClockConfig+0x1c0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d210      	bcs.n	800313c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b24      	ldr	r3, [pc, #144]	; (80031ac <HAL_RCC_ClockConfig+0x1c0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 0207 	bic.w	r2, r3, #7
 8003122:	4922      	ldr	r1, [pc, #136]	; (80031ac <HAL_RCC_ClockConfig+0x1c0>)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	4b20      	ldr	r3, [pc, #128]	; (80031ac <HAL_RCC_ClockConfig+0x1c0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e032      	b.n	80031a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4916      	ldr	r1, [pc, #88]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	4313      	orrs	r3, r2
 8003158:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	490e      	ldr	r1, [pc, #56]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	4313      	orrs	r3, r2
 8003178:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800317a:	f000 f821 	bl	80031c0 <HAL_RCC_GetSysClockFreq>
 800317e:	4602      	mov	r2, r0
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	490a      	ldr	r1, [pc, #40]	; (80031b4 <HAL_RCC_ClockConfig+0x1c8>)
 800318c:	5ccb      	ldrb	r3, [r1, r3]
 800318e:	fa22 f303 	lsr.w	r3, r2, r3
 8003192:	4a09      	ldr	r2, [pc, #36]	; (80031b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003196:	4b09      	ldr	r3, [pc, #36]	; (80031bc <HAL_RCC_ClockConfig+0x1d0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe fcb4 	bl	8001b08 <HAL_InitTick>

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40022000 	.word	0x40022000
 80031b0:	40021000 	.word	0x40021000
 80031b4:	080044e4 	.word	0x080044e4
 80031b8:	20000040 	.word	0x20000040
 80031bc:	20000044 	.word	0x20000044

080031c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	2300      	movs	r3, #0
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	2300      	movs	r3, #0
 80031d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031da:	4b1e      	ldr	r3, [pc, #120]	; (8003254 <HAL_RCC_GetSysClockFreq+0x94>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d002      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0x30>
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d003      	beq.n	80031f6 <HAL_RCC_GetSysClockFreq+0x36>
 80031ee:	e027      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031f0:	4b19      	ldr	r3, [pc, #100]	; (8003258 <HAL_RCC_GetSysClockFreq+0x98>)
 80031f2:	613b      	str	r3, [r7, #16]
      break;
 80031f4:	e027      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	0c9b      	lsrs	r3, r3, #18
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	4a17      	ldr	r2, [pc, #92]	; (800325c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003200:	5cd3      	ldrb	r3, [r2, r3]
 8003202:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d010      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800320e:	4b11      	ldr	r3, [pc, #68]	; (8003254 <HAL_RCC_GetSysClockFreq+0x94>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	0c5b      	lsrs	r3, r3, #17
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	4a11      	ldr	r2, [pc, #68]	; (8003260 <HAL_RCC_GetSysClockFreq+0xa0>)
 800321a:	5cd3      	ldrb	r3, [r2, r3]
 800321c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a0d      	ldr	r2, [pc, #52]	; (8003258 <HAL_RCC_GetSysClockFreq+0x98>)
 8003222:	fb03 f202 	mul.w	r2, r3, r2
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	e004      	b.n	800323a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a0c      	ldr	r2, [pc, #48]	; (8003264 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003234:	fb02 f303 	mul.w	r3, r2, r3
 8003238:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	613b      	str	r3, [r7, #16]
      break;
 800323e:	e002      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_RCC_GetSysClockFreq+0x98>)
 8003242:	613b      	str	r3, [r7, #16]
      break;
 8003244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003246:	693b      	ldr	r3, [r7, #16]
}
 8003248:	4618      	mov	r0, r3
 800324a:	371c      	adds	r7, #28
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40021000 	.word	0x40021000
 8003258:	007a1200 	.word	0x007a1200
 800325c:	080044fc 	.word	0x080044fc
 8003260:	0800450c 	.word	0x0800450c
 8003264:	003d0900 	.word	0x003d0900

08003268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800326c:	4b02      	ldr	r3, [pc, #8]	; (8003278 <HAL_RCC_GetHCLKFreq+0x10>)
 800326e:	681b      	ldr	r3, [r3, #0]
}
 8003270:	4618      	mov	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr
 8003278:	20000040 	.word	0x20000040

0800327c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003280:	f7ff fff2 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 8003284:	4602      	mov	r2, r0
 8003286:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	4903      	ldr	r1, [pc, #12]	; (80032a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003292:	5ccb      	ldrb	r3, [r1, r3]
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40021000 	.word	0x40021000
 80032a0:	080044f4 	.word	0x080044f4

080032a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <RCC_Delay+0x34>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <RCC_Delay+0x38>)
 80032b2:	fba2 2303 	umull	r2, r3, r2, r3
 80032b6:	0a5b      	lsrs	r3, r3, #9
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032c0:	bf00      	nop
  }
  while (Delay --);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1e5a      	subs	r2, r3, #1
 80032c6:	60fa      	str	r2, [r7, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f9      	bne.n	80032c0 <RCC_Delay+0x1c>
}
 80032cc:	bf00      	nop
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	20000040 	.word	0x20000040
 80032dc:	10624dd3 	.word	0x10624dd3

080032e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e041      	b.n	8003376 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fe fade 	bl	80018c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3304      	adds	r3, #4
 800331c:	4619      	mov	r1, r3
 800331e:	4610      	mov	r0, r2
 8003320:	f000 fa5c 	bl	80037dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d001      	beq.n	8003398 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e03a      	b.n	800340e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a18      	ldr	r2, [pc, #96]	; (8003418 <HAL_TIM_Base_Start_IT+0x98>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00e      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x58>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c2:	d009      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x58>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a14      	ldr	r2, [pc, #80]	; (800341c <HAL_TIM_Base_Start_IT+0x9c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x58>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a13      	ldr	r2, [pc, #76]	; (8003420 <HAL_TIM_Base_Start_IT+0xa0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d111      	bne.n	80033fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d010      	beq.n	800340c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fa:	e007      	b.n	800340c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr
 8003418:	40012c00 	.word	0x40012c00
 800341c:	40000400 	.word	0x40000400
 8003420:	40000800 	.word	0x40000800

08003424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d020      	beq.n	8003488 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01b      	beq.n	8003488 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0202 	mvn.w	r2, #2
 8003458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f998 	bl	80037a4 <HAL_TIM_IC_CaptureCallback>
 8003474:	e005      	b.n	8003482 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f98b 	bl	8003792 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f99a 	bl	80037b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d020      	beq.n	80034d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01b      	beq.n	80034d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0204 	mvn.w	r2, #4
 80034a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f972 	bl	80037a4 <HAL_TIM_IC_CaptureCallback>
 80034c0:	e005      	b.n	80034ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f965 	bl	8003792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f974 	bl	80037b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d020      	beq.n	8003520 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01b      	beq.n	8003520 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0208 	mvn.w	r2, #8
 80034f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2204      	movs	r2, #4
 80034f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f94c 	bl	80037a4 <HAL_TIM_IC_CaptureCallback>
 800350c:	e005      	b.n	800351a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f93f 	bl	8003792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f94e 	bl	80037b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b00      	cmp	r3, #0
 8003528:	d020      	beq.n	800356c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	2b00      	cmp	r3, #0
 8003532:	d01b      	beq.n	800356c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0210 	mvn.w	r2, #16
 800353c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2208      	movs	r2, #8
 8003542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f926 	bl	80037a4 <HAL_TIM_IC_CaptureCallback>
 8003558:	e005      	b.n	8003566 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f919 	bl	8003792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f928 	bl	80037b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00c      	beq.n	8003590 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0201 	mvn.w	r2, #1
 8003588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fd ff68 	bl	8001460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00c      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fa7f 	bl	8003ab2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00c      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f8f8 	bl	80037c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00c      	beq.n	80035fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0220 	mvn.w	r2, #32
 80035f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fa52 	bl	8003aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035fc:	bf00      	nop
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_TIM_ConfigClockSource+0x1c>
 800361c:	2302      	movs	r3, #2
 800361e:	e0b4      	b.n	800378a <HAL_TIM_ConfigClockSource+0x186>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800363e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003646:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003658:	d03e      	beq.n	80036d8 <HAL_TIM_ConfigClockSource+0xd4>
 800365a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800365e:	f200 8087 	bhi.w	8003770 <HAL_TIM_ConfigClockSource+0x16c>
 8003662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003666:	f000 8086 	beq.w	8003776 <HAL_TIM_ConfigClockSource+0x172>
 800366a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366e:	d87f      	bhi.n	8003770 <HAL_TIM_ConfigClockSource+0x16c>
 8003670:	2b70      	cmp	r3, #112	; 0x70
 8003672:	d01a      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0xa6>
 8003674:	2b70      	cmp	r3, #112	; 0x70
 8003676:	d87b      	bhi.n	8003770 <HAL_TIM_ConfigClockSource+0x16c>
 8003678:	2b60      	cmp	r3, #96	; 0x60
 800367a:	d050      	beq.n	800371e <HAL_TIM_ConfigClockSource+0x11a>
 800367c:	2b60      	cmp	r3, #96	; 0x60
 800367e:	d877      	bhi.n	8003770 <HAL_TIM_ConfigClockSource+0x16c>
 8003680:	2b50      	cmp	r3, #80	; 0x50
 8003682:	d03c      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0xfa>
 8003684:	2b50      	cmp	r3, #80	; 0x50
 8003686:	d873      	bhi.n	8003770 <HAL_TIM_ConfigClockSource+0x16c>
 8003688:	2b40      	cmp	r3, #64	; 0x40
 800368a:	d058      	beq.n	800373e <HAL_TIM_ConfigClockSource+0x13a>
 800368c:	2b40      	cmp	r3, #64	; 0x40
 800368e:	d86f      	bhi.n	8003770 <HAL_TIM_ConfigClockSource+0x16c>
 8003690:	2b30      	cmp	r3, #48	; 0x30
 8003692:	d064      	beq.n	800375e <HAL_TIM_ConfigClockSource+0x15a>
 8003694:	2b30      	cmp	r3, #48	; 0x30
 8003696:	d86b      	bhi.n	8003770 <HAL_TIM_ConfigClockSource+0x16c>
 8003698:	2b20      	cmp	r3, #32
 800369a:	d060      	beq.n	800375e <HAL_TIM_ConfigClockSource+0x15a>
 800369c:	2b20      	cmp	r3, #32
 800369e:	d867      	bhi.n	8003770 <HAL_TIM_ConfigClockSource+0x16c>
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d05c      	beq.n	800375e <HAL_TIM_ConfigClockSource+0x15a>
 80036a4:	2b10      	cmp	r3, #16
 80036a6:	d05a      	beq.n	800375e <HAL_TIM_ConfigClockSource+0x15a>
 80036a8:	e062      	b.n	8003770 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036ba:	f000 f974 	bl	80039a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	609a      	str	r2, [r3, #8]
      break;
 80036d6:	e04f      	b.n	8003778 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036e8:	f000 f95d 	bl	80039a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036fa:	609a      	str	r2, [r3, #8]
      break;
 80036fc:	e03c      	b.n	8003778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800370a:	461a      	mov	r2, r3
 800370c:	f000 f8d4 	bl	80038b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2150      	movs	r1, #80	; 0x50
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f92b 	bl	8003972 <TIM_ITRx_SetConfig>
      break;
 800371c:	e02c      	b.n	8003778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800372a:	461a      	mov	r2, r3
 800372c:	f000 f8f2 	bl	8003914 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2160      	movs	r1, #96	; 0x60
 8003736:	4618      	mov	r0, r3
 8003738:	f000 f91b 	bl	8003972 <TIM_ITRx_SetConfig>
      break;
 800373c:	e01c      	b.n	8003778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800374a:	461a      	mov	r2, r3
 800374c:	f000 f8b4 	bl	80038b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2140      	movs	r1, #64	; 0x40
 8003756:	4618      	mov	r0, r3
 8003758:	f000 f90b 	bl	8003972 <TIM_ITRx_SetConfig>
      break;
 800375c:	e00c      	b.n	8003778 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4619      	mov	r1, r3
 8003768:	4610      	mov	r0, r2
 800376a:	f000 f902 	bl	8003972 <TIM_ITRx_SetConfig>
      break;
 800376e:	e003      	b.n	8003778 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	73fb      	strb	r3, [r7, #15]
      break;
 8003774:	e000      	b.n	8003778 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003776:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003788:	7bfb      	ldrb	r3, [r7, #15]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr

080037a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc80      	pop	{r7}
 80037b4:	4770      	bx	lr

080037b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr
	...

080037dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a2f      	ldr	r2, [pc, #188]	; (80038ac <TIM_Base_SetConfig+0xd0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00b      	beq.n	800380c <TIM_Base_SetConfig+0x30>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fa:	d007      	beq.n	800380c <TIM_Base_SetConfig+0x30>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a2c      	ldr	r2, [pc, #176]	; (80038b0 <TIM_Base_SetConfig+0xd4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d003      	beq.n	800380c <TIM_Base_SetConfig+0x30>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a2b      	ldr	r2, [pc, #172]	; (80038b4 <TIM_Base_SetConfig+0xd8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d108      	bne.n	800381e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a22      	ldr	r2, [pc, #136]	; (80038ac <TIM_Base_SetConfig+0xd0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00b      	beq.n	800383e <TIM_Base_SetConfig+0x62>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382c:	d007      	beq.n	800383e <TIM_Base_SetConfig+0x62>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a1f      	ldr	r2, [pc, #124]	; (80038b0 <TIM_Base_SetConfig+0xd4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d003      	beq.n	800383e <TIM_Base_SetConfig+0x62>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a1e      	ldr	r2, [pc, #120]	; (80038b4 <TIM_Base_SetConfig+0xd8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d108      	bne.n	8003850 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4313      	orrs	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a0d      	ldr	r2, [pc, #52]	; (80038ac <TIM_Base_SetConfig+0xd0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d103      	bne.n	8003884 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f023 0201 	bic.w	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	611a      	str	r2, [r3, #16]
  }
}
 80038a2:	bf00      	nop
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr
 80038ac:	40012c00 	.word	0x40012c00
 80038b0:	40000400 	.word	0x40000400
 80038b4:	40000800 	.word	0x40000800

080038b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	f023 0201 	bic.w	r2, r3, #1
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f023 030a 	bic.w	r3, r3, #10
 80038f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	621a      	str	r2, [r3, #32]
}
 800390a:	bf00      	nop
 800390c:	371c      	adds	r7, #28
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f023 0210 	bic.w	r2, r3, #16
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800393e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	031b      	lsls	r3, r3, #12
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003950:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	621a      	str	r2, [r3, #32]
}
 8003968:	bf00      	nop
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr

08003972 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003972:	b480      	push	{r7}
 8003974:	b085      	sub	sp, #20
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	f043 0307 	orr.w	r3, r3, #7
 8003994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	609a      	str	r2, [r3, #8]
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b087      	sub	sp, #28
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	021a      	lsls	r2, r3, #8
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	431a      	orrs	r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	609a      	str	r2, [r3, #8]
}
 80039da:	bf00      	nop
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e046      	b.n	8003a8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00e      	beq.n	8003a5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a48:	d009      	beq.n	8003a5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a12      	ldr	r2, [pc, #72]	; (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d004      	beq.n	8003a5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a10      	ldr	r2, [pc, #64]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d10c      	bne.n	8003a78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr
 8003a94:	40012c00 	.word	0x40012c00
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800

08003aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr

08003ac4 <malloc>:
 8003ac4:	4b02      	ldr	r3, [pc, #8]	; (8003ad0 <malloc+0xc>)
 8003ac6:	4601      	mov	r1, r0
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	f000 b82b 	b.w	8003b24 <_malloc_r>
 8003ace:	bf00      	nop
 8003ad0:	20000098 	.word	0x20000098

08003ad4 <free>:
 8003ad4:	4b02      	ldr	r3, [pc, #8]	; (8003ae0 <free+0xc>)
 8003ad6:	4601      	mov	r1, r0
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	f000 b913 	b.w	8003d04 <_free_r>
 8003ade:	bf00      	nop
 8003ae0:	20000098 	.word	0x20000098

08003ae4 <sbrk_aligned>:
 8003ae4:	b570      	push	{r4, r5, r6, lr}
 8003ae6:	4e0e      	ldr	r6, [pc, #56]	; (8003b20 <sbrk_aligned+0x3c>)
 8003ae8:	460c      	mov	r4, r1
 8003aea:	6831      	ldr	r1, [r6, #0]
 8003aec:	4605      	mov	r5, r0
 8003aee:	b911      	cbnz	r1, 8003af6 <sbrk_aligned+0x12>
 8003af0:	f000 f8cc 	bl	8003c8c <_sbrk_r>
 8003af4:	6030      	str	r0, [r6, #0]
 8003af6:	4621      	mov	r1, r4
 8003af8:	4628      	mov	r0, r5
 8003afa:	f000 f8c7 	bl	8003c8c <_sbrk_r>
 8003afe:	1c43      	adds	r3, r0, #1
 8003b00:	d00a      	beq.n	8003b18 <sbrk_aligned+0x34>
 8003b02:	1cc4      	adds	r4, r0, #3
 8003b04:	f024 0403 	bic.w	r4, r4, #3
 8003b08:	42a0      	cmp	r0, r4
 8003b0a:	d007      	beq.n	8003b1c <sbrk_aligned+0x38>
 8003b0c:	1a21      	subs	r1, r4, r0
 8003b0e:	4628      	mov	r0, r5
 8003b10:	f000 f8bc 	bl	8003c8c <_sbrk_r>
 8003b14:	3001      	adds	r0, #1
 8003b16:	d101      	bne.n	8003b1c <sbrk_aligned+0x38>
 8003b18:	f04f 34ff 	mov.w	r4, #4294967295
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	200001b8 	.word	0x200001b8

08003b24 <_malloc_r>:
 8003b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b28:	1ccd      	adds	r5, r1, #3
 8003b2a:	f025 0503 	bic.w	r5, r5, #3
 8003b2e:	3508      	adds	r5, #8
 8003b30:	2d0c      	cmp	r5, #12
 8003b32:	bf38      	it	cc
 8003b34:	250c      	movcc	r5, #12
 8003b36:	2d00      	cmp	r5, #0
 8003b38:	4607      	mov	r7, r0
 8003b3a:	db01      	blt.n	8003b40 <_malloc_r+0x1c>
 8003b3c:	42a9      	cmp	r1, r5
 8003b3e:	d905      	bls.n	8003b4c <_malloc_r+0x28>
 8003b40:	230c      	movs	r3, #12
 8003b42:	2600      	movs	r6, #0
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	4630      	mov	r0, r6
 8003b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003c20 <_malloc_r+0xfc>
 8003b50:	f000 f868 	bl	8003c24 <__malloc_lock>
 8003b54:	f8d8 3000 	ldr.w	r3, [r8]
 8003b58:	461c      	mov	r4, r3
 8003b5a:	bb5c      	cbnz	r4, 8003bb4 <_malloc_r+0x90>
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	4638      	mov	r0, r7
 8003b60:	f7ff ffc0 	bl	8003ae4 <sbrk_aligned>
 8003b64:	1c43      	adds	r3, r0, #1
 8003b66:	4604      	mov	r4, r0
 8003b68:	d155      	bne.n	8003c16 <_malloc_r+0xf2>
 8003b6a:	f8d8 4000 	ldr.w	r4, [r8]
 8003b6e:	4626      	mov	r6, r4
 8003b70:	2e00      	cmp	r6, #0
 8003b72:	d145      	bne.n	8003c00 <_malloc_r+0xdc>
 8003b74:	2c00      	cmp	r4, #0
 8003b76:	d048      	beq.n	8003c0a <_malloc_r+0xe6>
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	4631      	mov	r1, r6
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	eb04 0903 	add.w	r9, r4, r3
 8003b82:	f000 f883 	bl	8003c8c <_sbrk_r>
 8003b86:	4581      	cmp	r9, r0
 8003b88:	d13f      	bne.n	8003c0a <_malloc_r+0xe6>
 8003b8a:	6821      	ldr	r1, [r4, #0]
 8003b8c:	4638      	mov	r0, r7
 8003b8e:	1a6d      	subs	r5, r5, r1
 8003b90:	4629      	mov	r1, r5
 8003b92:	f7ff ffa7 	bl	8003ae4 <sbrk_aligned>
 8003b96:	3001      	adds	r0, #1
 8003b98:	d037      	beq.n	8003c0a <_malloc_r+0xe6>
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	442b      	add	r3, r5
 8003b9e:	6023      	str	r3, [r4, #0]
 8003ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d038      	beq.n	8003c1a <_malloc_r+0xf6>
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	42a2      	cmp	r2, r4
 8003bac:	d12b      	bne.n	8003c06 <_malloc_r+0xe2>
 8003bae:	2200      	movs	r2, #0
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	e00f      	b.n	8003bd4 <_malloc_r+0xb0>
 8003bb4:	6822      	ldr	r2, [r4, #0]
 8003bb6:	1b52      	subs	r2, r2, r5
 8003bb8:	d41f      	bmi.n	8003bfa <_malloc_r+0xd6>
 8003bba:	2a0b      	cmp	r2, #11
 8003bbc:	d917      	bls.n	8003bee <_malloc_r+0xca>
 8003bbe:	1961      	adds	r1, r4, r5
 8003bc0:	42a3      	cmp	r3, r4
 8003bc2:	6025      	str	r5, [r4, #0]
 8003bc4:	bf18      	it	ne
 8003bc6:	6059      	strne	r1, [r3, #4]
 8003bc8:	6863      	ldr	r3, [r4, #4]
 8003bca:	bf08      	it	eq
 8003bcc:	f8c8 1000 	streq.w	r1, [r8]
 8003bd0:	5162      	str	r2, [r4, r5]
 8003bd2:	604b      	str	r3, [r1, #4]
 8003bd4:	4638      	mov	r0, r7
 8003bd6:	f104 060b 	add.w	r6, r4, #11
 8003bda:	f000 f829 	bl	8003c30 <__malloc_unlock>
 8003bde:	f026 0607 	bic.w	r6, r6, #7
 8003be2:	1d23      	adds	r3, r4, #4
 8003be4:	1af2      	subs	r2, r6, r3
 8003be6:	d0ae      	beq.n	8003b46 <_malloc_r+0x22>
 8003be8:	1b9b      	subs	r3, r3, r6
 8003bea:	50a3      	str	r3, [r4, r2]
 8003bec:	e7ab      	b.n	8003b46 <_malloc_r+0x22>
 8003bee:	42a3      	cmp	r3, r4
 8003bf0:	6862      	ldr	r2, [r4, #4]
 8003bf2:	d1dd      	bne.n	8003bb0 <_malloc_r+0x8c>
 8003bf4:	f8c8 2000 	str.w	r2, [r8]
 8003bf8:	e7ec      	b.n	8003bd4 <_malloc_r+0xb0>
 8003bfa:	4623      	mov	r3, r4
 8003bfc:	6864      	ldr	r4, [r4, #4]
 8003bfe:	e7ac      	b.n	8003b5a <_malloc_r+0x36>
 8003c00:	4634      	mov	r4, r6
 8003c02:	6876      	ldr	r6, [r6, #4]
 8003c04:	e7b4      	b.n	8003b70 <_malloc_r+0x4c>
 8003c06:	4613      	mov	r3, r2
 8003c08:	e7cc      	b.n	8003ba4 <_malloc_r+0x80>
 8003c0a:	230c      	movs	r3, #12
 8003c0c:	4638      	mov	r0, r7
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	f000 f80e 	bl	8003c30 <__malloc_unlock>
 8003c14:	e797      	b.n	8003b46 <_malloc_r+0x22>
 8003c16:	6025      	str	r5, [r4, #0]
 8003c18:	e7dc      	b.n	8003bd4 <_malloc_r+0xb0>
 8003c1a:	605b      	str	r3, [r3, #4]
 8003c1c:	deff      	udf	#255	; 0xff
 8003c1e:	bf00      	nop
 8003c20:	200001b4 	.word	0x200001b4

08003c24 <__malloc_lock>:
 8003c24:	4801      	ldr	r0, [pc, #4]	; (8003c2c <__malloc_lock+0x8>)
 8003c26:	f000 b86b 	b.w	8003d00 <__retarget_lock_acquire_recursive>
 8003c2a:	bf00      	nop
 8003c2c:	200002f8 	.word	0x200002f8

08003c30 <__malloc_unlock>:
 8003c30:	4801      	ldr	r0, [pc, #4]	; (8003c38 <__malloc_unlock+0x8>)
 8003c32:	f000 b866 	b.w	8003d02 <__retarget_lock_release_recursive>
 8003c36:	bf00      	nop
 8003c38:	200002f8 	.word	0x200002f8

08003c3c <siprintf>:
 8003c3c:	b40e      	push	{r1, r2, r3}
 8003c3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c42:	b500      	push	{lr}
 8003c44:	b09c      	sub	sp, #112	; 0x70
 8003c46:	ab1d      	add	r3, sp, #116	; 0x74
 8003c48:	9002      	str	r0, [sp, #8]
 8003c4a:	9006      	str	r0, [sp, #24]
 8003c4c:	9107      	str	r1, [sp, #28]
 8003c4e:	9104      	str	r1, [sp, #16]
 8003c50:	4808      	ldr	r0, [pc, #32]	; (8003c74 <siprintf+0x38>)
 8003c52:	4909      	ldr	r1, [pc, #36]	; (8003c78 <siprintf+0x3c>)
 8003c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c58:	9105      	str	r1, [sp, #20]
 8003c5a:	6800      	ldr	r0, [r0, #0]
 8003c5c:	a902      	add	r1, sp, #8
 8003c5e:	9301      	str	r3, [sp, #4]
 8003c60:	f000 f8f2 	bl	8003e48 <_svfiprintf_r>
 8003c64:	2200      	movs	r2, #0
 8003c66:	9b02      	ldr	r3, [sp, #8]
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	b01c      	add	sp, #112	; 0x70
 8003c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c70:	b003      	add	sp, #12
 8003c72:	4770      	bx	lr
 8003c74:	20000098 	.word	0x20000098
 8003c78:	ffff0208 	.word	0xffff0208

08003c7c <memset>:
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	4402      	add	r2, r0
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d100      	bne.n	8003c86 <memset+0xa>
 8003c84:	4770      	bx	lr
 8003c86:	f803 1b01 	strb.w	r1, [r3], #1
 8003c8a:	e7f9      	b.n	8003c80 <memset+0x4>

08003c8c <_sbrk_r>:
 8003c8c:	b538      	push	{r3, r4, r5, lr}
 8003c8e:	2300      	movs	r3, #0
 8003c90:	4d05      	ldr	r5, [pc, #20]	; (8003ca8 <_sbrk_r+0x1c>)
 8003c92:	4604      	mov	r4, r0
 8003c94:	4608      	mov	r0, r1
 8003c96:	602b      	str	r3, [r5, #0]
 8003c98:	f7fd febe 	bl	8001a18 <_sbrk>
 8003c9c:	1c43      	adds	r3, r0, #1
 8003c9e:	d102      	bne.n	8003ca6 <_sbrk_r+0x1a>
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	b103      	cbz	r3, 8003ca6 <_sbrk_r+0x1a>
 8003ca4:	6023      	str	r3, [r4, #0]
 8003ca6:	bd38      	pop	{r3, r4, r5, pc}
 8003ca8:	200002f4 	.word	0x200002f4

08003cac <__errno>:
 8003cac:	4b01      	ldr	r3, [pc, #4]	; (8003cb4 <__errno+0x8>)
 8003cae:	6818      	ldr	r0, [r3, #0]
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	20000098 	.word	0x20000098

08003cb8 <__libc_init_array>:
 8003cb8:	b570      	push	{r4, r5, r6, lr}
 8003cba:	2600      	movs	r6, #0
 8003cbc:	4d0c      	ldr	r5, [pc, #48]	; (8003cf0 <__libc_init_array+0x38>)
 8003cbe:	4c0d      	ldr	r4, [pc, #52]	; (8003cf4 <__libc_init_array+0x3c>)
 8003cc0:	1b64      	subs	r4, r4, r5
 8003cc2:	10a4      	asrs	r4, r4, #2
 8003cc4:	42a6      	cmp	r6, r4
 8003cc6:	d109      	bne.n	8003cdc <__libc_init_array+0x24>
 8003cc8:	f000 fbbe 	bl	8004448 <_init>
 8003ccc:	2600      	movs	r6, #0
 8003cce:	4d0a      	ldr	r5, [pc, #40]	; (8003cf8 <__libc_init_array+0x40>)
 8003cd0:	4c0a      	ldr	r4, [pc, #40]	; (8003cfc <__libc_init_array+0x44>)
 8003cd2:	1b64      	subs	r4, r4, r5
 8003cd4:	10a4      	asrs	r4, r4, #2
 8003cd6:	42a6      	cmp	r6, r4
 8003cd8:	d105      	bne.n	8003ce6 <__libc_init_array+0x2e>
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
 8003cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce0:	4798      	blx	r3
 8003ce2:	3601      	adds	r6, #1
 8003ce4:	e7ee      	b.n	8003cc4 <__libc_init_array+0xc>
 8003ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cea:	4798      	blx	r3
 8003cec:	3601      	adds	r6, #1
 8003cee:	e7f2      	b.n	8003cd6 <__libc_init_array+0x1e>
 8003cf0:	08004544 	.word	0x08004544
 8003cf4:	08004544 	.word	0x08004544
 8003cf8:	08004544 	.word	0x08004544
 8003cfc:	08004548 	.word	0x08004548

08003d00 <__retarget_lock_acquire_recursive>:
 8003d00:	4770      	bx	lr

08003d02 <__retarget_lock_release_recursive>:
 8003d02:	4770      	bx	lr

08003d04 <_free_r>:
 8003d04:	b538      	push	{r3, r4, r5, lr}
 8003d06:	4605      	mov	r5, r0
 8003d08:	2900      	cmp	r1, #0
 8003d0a:	d040      	beq.n	8003d8e <_free_r+0x8a>
 8003d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d10:	1f0c      	subs	r4, r1, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bfb8      	it	lt
 8003d16:	18e4      	addlt	r4, r4, r3
 8003d18:	f7ff ff84 	bl	8003c24 <__malloc_lock>
 8003d1c:	4a1c      	ldr	r2, [pc, #112]	; (8003d90 <_free_r+0x8c>)
 8003d1e:	6813      	ldr	r3, [r2, #0]
 8003d20:	b933      	cbnz	r3, 8003d30 <_free_r+0x2c>
 8003d22:	6063      	str	r3, [r4, #4]
 8003d24:	6014      	str	r4, [r2, #0]
 8003d26:	4628      	mov	r0, r5
 8003d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d2c:	f7ff bf80 	b.w	8003c30 <__malloc_unlock>
 8003d30:	42a3      	cmp	r3, r4
 8003d32:	d908      	bls.n	8003d46 <_free_r+0x42>
 8003d34:	6820      	ldr	r0, [r4, #0]
 8003d36:	1821      	adds	r1, r4, r0
 8003d38:	428b      	cmp	r3, r1
 8003d3a:	bf01      	itttt	eq
 8003d3c:	6819      	ldreq	r1, [r3, #0]
 8003d3e:	685b      	ldreq	r3, [r3, #4]
 8003d40:	1809      	addeq	r1, r1, r0
 8003d42:	6021      	streq	r1, [r4, #0]
 8003d44:	e7ed      	b.n	8003d22 <_free_r+0x1e>
 8003d46:	461a      	mov	r2, r3
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	b10b      	cbz	r3, 8003d50 <_free_r+0x4c>
 8003d4c:	42a3      	cmp	r3, r4
 8003d4e:	d9fa      	bls.n	8003d46 <_free_r+0x42>
 8003d50:	6811      	ldr	r1, [r2, #0]
 8003d52:	1850      	adds	r0, r2, r1
 8003d54:	42a0      	cmp	r0, r4
 8003d56:	d10b      	bne.n	8003d70 <_free_r+0x6c>
 8003d58:	6820      	ldr	r0, [r4, #0]
 8003d5a:	4401      	add	r1, r0
 8003d5c:	1850      	adds	r0, r2, r1
 8003d5e:	4283      	cmp	r3, r0
 8003d60:	6011      	str	r1, [r2, #0]
 8003d62:	d1e0      	bne.n	8003d26 <_free_r+0x22>
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	4408      	add	r0, r1
 8003d6a:	6010      	str	r0, [r2, #0]
 8003d6c:	6053      	str	r3, [r2, #4]
 8003d6e:	e7da      	b.n	8003d26 <_free_r+0x22>
 8003d70:	d902      	bls.n	8003d78 <_free_r+0x74>
 8003d72:	230c      	movs	r3, #12
 8003d74:	602b      	str	r3, [r5, #0]
 8003d76:	e7d6      	b.n	8003d26 <_free_r+0x22>
 8003d78:	6820      	ldr	r0, [r4, #0]
 8003d7a:	1821      	adds	r1, r4, r0
 8003d7c:	428b      	cmp	r3, r1
 8003d7e:	bf01      	itttt	eq
 8003d80:	6819      	ldreq	r1, [r3, #0]
 8003d82:	685b      	ldreq	r3, [r3, #4]
 8003d84:	1809      	addeq	r1, r1, r0
 8003d86:	6021      	streq	r1, [r4, #0]
 8003d88:	6063      	str	r3, [r4, #4]
 8003d8a:	6054      	str	r4, [r2, #4]
 8003d8c:	e7cb      	b.n	8003d26 <_free_r+0x22>
 8003d8e:	bd38      	pop	{r3, r4, r5, pc}
 8003d90:	200001b4 	.word	0x200001b4

08003d94 <__ssputs_r>:
 8003d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d98:	461f      	mov	r7, r3
 8003d9a:	688e      	ldr	r6, [r1, #8]
 8003d9c:	4682      	mov	sl, r0
 8003d9e:	42be      	cmp	r6, r7
 8003da0:	460c      	mov	r4, r1
 8003da2:	4690      	mov	r8, r2
 8003da4:	680b      	ldr	r3, [r1, #0]
 8003da6:	d82c      	bhi.n	8003e02 <__ssputs_r+0x6e>
 8003da8:	898a      	ldrh	r2, [r1, #12]
 8003daa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003dae:	d026      	beq.n	8003dfe <__ssputs_r+0x6a>
 8003db0:	6965      	ldr	r5, [r4, #20]
 8003db2:	6909      	ldr	r1, [r1, #16]
 8003db4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003db8:	eba3 0901 	sub.w	r9, r3, r1
 8003dbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003dc0:	1c7b      	adds	r3, r7, #1
 8003dc2:	444b      	add	r3, r9
 8003dc4:	106d      	asrs	r5, r5, #1
 8003dc6:	429d      	cmp	r5, r3
 8003dc8:	bf38      	it	cc
 8003dca:	461d      	movcc	r5, r3
 8003dcc:	0553      	lsls	r3, r2, #21
 8003dce:	d527      	bpl.n	8003e20 <__ssputs_r+0x8c>
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	f7ff fea7 	bl	8003b24 <_malloc_r>
 8003dd6:	4606      	mov	r6, r0
 8003dd8:	b360      	cbz	r0, 8003e34 <__ssputs_r+0xa0>
 8003dda:	464a      	mov	r2, r9
 8003ddc:	6921      	ldr	r1, [r4, #16]
 8003dde:	f000 faed 	bl	80043bc <memcpy>
 8003de2:	89a3      	ldrh	r3, [r4, #12]
 8003de4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dec:	81a3      	strh	r3, [r4, #12]
 8003dee:	6126      	str	r6, [r4, #16]
 8003df0:	444e      	add	r6, r9
 8003df2:	6026      	str	r6, [r4, #0]
 8003df4:	463e      	mov	r6, r7
 8003df6:	6165      	str	r5, [r4, #20]
 8003df8:	eba5 0509 	sub.w	r5, r5, r9
 8003dfc:	60a5      	str	r5, [r4, #8]
 8003dfe:	42be      	cmp	r6, r7
 8003e00:	d900      	bls.n	8003e04 <__ssputs_r+0x70>
 8003e02:	463e      	mov	r6, r7
 8003e04:	4632      	mov	r2, r6
 8003e06:	4641      	mov	r1, r8
 8003e08:	6820      	ldr	r0, [r4, #0]
 8003e0a:	f000 faaf 	bl	800436c <memmove>
 8003e0e:	2000      	movs	r0, #0
 8003e10:	68a3      	ldr	r3, [r4, #8]
 8003e12:	1b9b      	subs	r3, r3, r6
 8003e14:	60a3      	str	r3, [r4, #8]
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	4433      	add	r3, r6
 8003e1a:	6023      	str	r3, [r4, #0]
 8003e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e20:	462a      	mov	r2, r5
 8003e22:	f000 fad9 	bl	80043d8 <_realloc_r>
 8003e26:	4606      	mov	r6, r0
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	d1e0      	bne.n	8003dee <__ssputs_r+0x5a>
 8003e2c:	4650      	mov	r0, sl
 8003e2e:	6921      	ldr	r1, [r4, #16]
 8003e30:	f7ff ff68 	bl	8003d04 <_free_r>
 8003e34:	230c      	movs	r3, #12
 8003e36:	f8ca 3000 	str.w	r3, [sl]
 8003e3a:	89a3      	ldrh	r3, [r4, #12]
 8003e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e44:	81a3      	strh	r3, [r4, #12]
 8003e46:	e7e9      	b.n	8003e1c <__ssputs_r+0x88>

08003e48 <_svfiprintf_r>:
 8003e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e4c:	4698      	mov	r8, r3
 8003e4e:	898b      	ldrh	r3, [r1, #12]
 8003e50:	4607      	mov	r7, r0
 8003e52:	061b      	lsls	r3, r3, #24
 8003e54:	460d      	mov	r5, r1
 8003e56:	4614      	mov	r4, r2
 8003e58:	b09d      	sub	sp, #116	; 0x74
 8003e5a:	d50e      	bpl.n	8003e7a <_svfiprintf_r+0x32>
 8003e5c:	690b      	ldr	r3, [r1, #16]
 8003e5e:	b963      	cbnz	r3, 8003e7a <_svfiprintf_r+0x32>
 8003e60:	2140      	movs	r1, #64	; 0x40
 8003e62:	f7ff fe5f 	bl	8003b24 <_malloc_r>
 8003e66:	6028      	str	r0, [r5, #0]
 8003e68:	6128      	str	r0, [r5, #16]
 8003e6a:	b920      	cbnz	r0, 8003e76 <_svfiprintf_r+0x2e>
 8003e6c:	230c      	movs	r3, #12
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295
 8003e74:	e0d0      	b.n	8004018 <_svfiprintf_r+0x1d0>
 8003e76:	2340      	movs	r3, #64	; 0x40
 8003e78:	616b      	str	r3, [r5, #20]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e7e:	2320      	movs	r3, #32
 8003e80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e84:	2330      	movs	r3, #48	; 0x30
 8003e86:	f04f 0901 	mov.w	r9, #1
 8003e8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e8e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004030 <_svfiprintf_r+0x1e8>
 8003e92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e96:	4623      	mov	r3, r4
 8003e98:	469a      	mov	sl, r3
 8003e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e9e:	b10a      	cbz	r2, 8003ea4 <_svfiprintf_r+0x5c>
 8003ea0:	2a25      	cmp	r2, #37	; 0x25
 8003ea2:	d1f9      	bne.n	8003e98 <_svfiprintf_r+0x50>
 8003ea4:	ebba 0b04 	subs.w	fp, sl, r4
 8003ea8:	d00b      	beq.n	8003ec2 <_svfiprintf_r+0x7a>
 8003eaa:	465b      	mov	r3, fp
 8003eac:	4622      	mov	r2, r4
 8003eae:	4629      	mov	r1, r5
 8003eb0:	4638      	mov	r0, r7
 8003eb2:	f7ff ff6f 	bl	8003d94 <__ssputs_r>
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	f000 80a9 	beq.w	800400e <_svfiprintf_r+0x1c6>
 8003ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ebe:	445a      	add	r2, fp
 8003ec0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 80a1 	beq.w	800400e <_svfiprintf_r+0x1c6>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ed6:	f10a 0a01 	add.w	sl, sl, #1
 8003eda:	9304      	str	r3, [sp, #16]
 8003edc:	9307      	str	r3, [sp, #28]
 8003ede:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ee2:	931a      	str	r3, [sp, #104]	; 0x68
 8003ee4:	4654      	mov	r4, sl
 8003ee6:	2205      	movs	r2, #5
 8003ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eec:	4850      	ldr	r0, [pc, #320]	; (8004030 <_svfiprintf_r+0x1e8>)
 8003eee:	f000 fa57 	bl	80043a0 <memchr>
 8003ef2:	9a04      	ldr	r2, [sp, #16]
 8003ef4:	b9d8      	cbnz	r0, 8003f2e <_svfiprintf_r+0xe6>
 8003ef6:	06d0      	lsls	r0, r2, #27
 8003ef8:	bf44      	itt	mi
 8003efa:	2320      	movmi	r3, #32
 8003efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f00:	0711      	lsls	r1, r2, #28
 8003f02:	bf44      	itt	mi
 8003f04:	232b      	movmi	r3, #43	; 0x2b
 8003f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f10:	d015      	beq.n	8003f3e <_svfiprintf_r+0xf6>
 8003f12:	4654      	mov	r4, sl
 8003f14:	2000      	movs	r0, #0
 8003f16:	f04f 0c0a 	mov.w	ip, #10
 8003f1a:	9a07      	ldr	r2, [sp, #28]
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f22:	3b30      	subs	r3, #48	; 0x30
 8003f24:	2b09      	cmp	r3, #9
 8003f26:	d94d      	bls.n	8003fc4 <_svfiprintf_r+0x17c>
 8003f28:	b1b0      	cbz	r0, 8003f58 <_svfiprintf_r+0x110>
 8003f2a:	9207      	str	r2, [sp, #28]
 8003f2c:	e014      	b.n	8003f58 <_svfiprintf_r+0x110>
 8003f2e:	eba0 0308 	sub.w	r3, r0, r8
 8003f32:	fa09 f303 	lsl.w	r3, r9, r3
 8003f36:	4313      	orrs	r3, r2
 8003f38:	46a2      	mov	sl, r4
 8003f3a:	9304      	str	r3, [sp, #16]
 8003f3c:	e7d2      	b.n	8003ee4 <_svfiprintf_r+0x9c>
 8003f3e:	9b03      	ldr	r3, [sp, #12]
 8003f40:	1d19      	adds	r1, r3, #4
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	9103      	str	r1, [sp, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	bfbb      	ittet	lt
 8003f4a:	425b      	neglt	r3, r3
 8003f4c:	f042 0202 	orrlt.w	r2, r2, #2
 8003f50:	9307      	strge	r3, [sp, #28]
 8003f52:	9307      	strlt	r3, [sp, #28]
 8003f54:	bfb8      	it	lt
 8003f56:	9204      	strlt	r2, [sp, #16]
 8003f58:	7823      	ldrb	r3, [r4, #0]
 8003f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8003f5c:	d10c      	bne.n	8003f78 <_svfiprintf_r+0x130>
 8003f5e:	7863      	ldrb	r3, [r4, #1]
 8003f60:	2b2a      	cmp	r3, #42	; 0x2a
 8003f62:	d134      	bne.n	8003fce <_svfiprintf_r+0x186>
 8003f64:	9b03      	ldr	r3, [sp, #12]
 8003f66:	3402      	adds	r4, #2
 8003f68:	1d1a      	adds	r2, r3, #4
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	9203      	str	r2, [sp, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	bfb8      	it	lt
 8003f72:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f76:	9305      	str	r3, [sp, #20]
 8003f78:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004034 <_svfiprintf_r+0x1ec>
 8003f7c:	2203      	movs	r2, #3
 8003f7e:	4650      	mov	r0, sl
 8003f80:	7821      	ldrb	r1, [r4, #0]
 8003f82:	f000 fa0d 	bl	80043a0 <memchr>
 8003f86:	b138      	cbz	r0, 8003f98 <_svfiprintf_r+0x150>
 8003f88:	2240      	movs	r2, #64	; 0x40
 8003f8a:	9b04      	ldr	r3, [sp, #16]
 8003f8c:	eba0 000a 	sub.w	r0, r0, sl
 8003f90:	4082      	lsls	r2, r0
 8003f92:	4313      	orrs	r3, r2
 8003f94:	3401      	adds	r4, #1
 8003f96:	9304      	str	r3, [sp, #16]
 8003f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f9c:	2206      	movs	r2, #6
 8003f9e:	4826      	ldr	r0, [pc, #152]	; (8004038 <_svfiprintf_r+0x1f0>)
 8003fa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fa4:	f000 f9fc 	bl	80043a0 <memchr>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d038      	beq.n	800401e <_svfiprintf_r+0x1d6>
 8003fac:	4b23      	ldr	r3, [pc, #140]	; (800403c <_svfiprintf_r+0x1f4>)
 8003fae:	bb1b      	cbnz	r3, 8003ff8 <_svfiprintf_r+0x1b0>
 8003fb0:	9b03      	ldr	r3, [sp, #12]
 8003fb2:	3307      	adds	r3, #7
 8003fb4:	f023 0307 	bic.w	r3, r3, #7
 8003fb8:	3308      	adds	r3, #8
 8003fba:	9303      	str	r3, [sp, #12]
 8003fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fbe:	4433      	add	r3, r6
 8003fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc2:	e768      	b.n	8003e96 <_svfiprintf_r+0x4e>
 8003fc4:	460c      	mov	r4, r1
 8003fc6:	2001      	movs	r0, #1
 8003fc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fcc:	e7a6      	b.n	8003f1c <_svfiprintf_r+0xd4>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f04f 0c0a 	mov.w	ip, #10
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	3401      	adds	r4, #1
 8003fd8:	9305      	str	r3, [sp, #20]
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fe0:	3a30      	subs	r2, #48	; 0x30
 8003fe2:	2a09      	cmp	r2, #9
 8003fe4:	d903      	bls.n	8003fee <_svfiprintf_r+0x1a6>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0c6      	beq.n	8003f78 <_svfiprintf_r+0x130>
 8003fea:	9105      	str	r1, [sp, #20]
 8003fec:	e7c4      	b.n	8003f78 <_svfiprintf_r+0x130>
 8003fee:	4604      	mov	r4, r0
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ff6:	e7f0      	b.n	8003fda <_svfiprintf_r+0x192>
 8003ff8:	ab03      	add	r3, sp, #12
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	462a      	mov	r2, r5
 8003ffe:	4638      	mov	r0, r7
 8004000:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <_svfiprintf_r+0x1f8>)
 8004002:	a904      	add	r1, sp, #16
 8004004:	f3af 8000 	nop.w
 8004008:	1c42      	adds	r2, r0, #1
 800400a:	4606      	mov	r6, r0
 800400c:	d1d6      	bne.n	8003fbc <_svfiprintf_r+0x174>
 800400e:	89ab      	ldrh	r3, [r5, #12]
 8004010:	065b      	lsls	r3, r3, #25
 8004012:	f53f af2d 	bmi.w	8003e70 <_svfiprintf_r+0x28>
 8004016:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004018:	b01d      	add	sp, #116	; 0x74
 800401a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800401e:	ab03      	add	r3, sp, #12
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	462a      	mov	r2, r5
 8004024:	4638      	mov	r0, r7
 8004026:	4b06      	ldr	r3, [pc, #24]	; (8004040 <_svfiprintf_r+0x1f8>)
 8004028:	a904      	add	r1, sp, #16
 800402a:	f000 f87d 	bl	8004128 <_printf_i>
 800402e:	e7eb      	b.n	8004008 <_svfiprintf_r+0x1c0>
 8004030:	0800450e 	.word	0x0800450e
 8004034:	08004514 	.word	0x08004514
 8004038:	08004518 	.word	0x08004518
 800403c:	00000000 	.word	0x00000000
 8004040:	08003d95 	.word	0x08003d95

08004044 <_printf_common>:
 8004044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004048:	4616      	mov	r6, r2
 800404a:	4699      	mov	r9, r3
 800404c:	688a      	ldr	r2, [r1, #8]
 800404e:	690b      	ldr	r3, [r1, #16]
 8004050:	4607      	mov	r7, r0
 8004052:	4293      	cmp	r3, r2
 8004054:	bfb8      	it	lt
 8004056:	4613      	movlt	r3, r2
 8004058:	6033      	str	r3, [r6, #0]
 800405a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800405e:	460c      	mov	r4, r1
 8004060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004064:	b10a      	cbz	r2, 800406a <_printf_common+0x26>
 8004066:	3301      	adds	r3, #1
 8004068:	6033      	str	r3, [r6, #0]
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	0699      	lsls	r1, r3, #26
 800406e:	bf42      	ittt	mi
 8004070:	6833      	ldrmi	r3, [r6, #0]
 8004072:	3302      	addmi	r3, #2
 8004074:	6033      	strmi	r3, [r6, #0]
 8004076:	6825      	ldr	r5, [r4, #0]
 8004078:	f015 0506 	ands.w	r5, r5, #6
 800407c:	d106      	bne.n	800408c <_printf_common+0x48>
 800407e:	f104 0a19 	add.w	sl, r4, #25
 8004082:	68e3      	ldr	r3, [r4, #12]
 8004084:	6832      	ldr	r2, [r6, #0]
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	42ab      	cmp	r3, r5
 800408a:	dc2b      	bgt.n	80040e4 <_printf_common+0xa0>
 800408c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004090:	1e13      	subs	r3, r2, #0
 8004092:	6822      	ldr	r2, [r4, #0]
 8004094:	bf18      	it	ne
 8004096:	2301      	movne	r3, #1
 8004098:	0692      	lsls	r2, r2, #26
 800409a:	d430      	bmi.n	80040fe <_printf_common+0xba>
 800409c:	4649      	mov	r1, r9
 800409e:	4638      	mov	r0, r7
 80040a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040a4:	47c0      	blx	r8
 80040a6:	3001      	adds	r0, #1
 80040a8:	d023      	beq.n	80040f2 <_printf_common+0xae>
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	6922      	ldr	r2, [r4, #16]
 80040ae:	f003 0306 	and.w	r3, r3, #6
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	bf14      	ite	ne
 80040b6:	2500      	movne	r5, #0
 80040b8:	6833      	ldreq	r3, [r6, #0]
 80040ba:	f04f 0600 	mov.w	r6, #0
 80040be:	bf08      	it	eq
 80040c0:	68e5      	ldreq	r5, [r4, #12]
 80040c2:	f104 041a 	add.w	r4, r4, #26
 80040c6:	bf08      	it	eq
 80040c8:	1aed      	subeq	r5, r5, r3
 80040ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80040ce:	bf08      	it	eq
 80040d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040d4:	4293      	cmp	r3, r2
 80040d6:	bfc4      	itt	gt
 80040d8:	1a9b      	subgt	r3, r3, r2
 80040da:	18ed      	addgt	r5, r5, r3
 80040dc:	42b5      	cmp	r5, r6
 80040de:	d11a      	bne.n	8004116 <_printf_common+0xd2>
 80040e0:	2000      	movs	r0, #0
 80040e2:	e008      	b.n	80040f6 <_printf_common+0xb2>
 80040e4:	2301      	movs	r3, #1
 80040e6:	4652      	mov	r2, sl
 80040e8:	4649      	mov	r1, r9
 80040ea:	4638      	mov	r0, r7
 80040ec:	47c0      	blx	r8
 80040ee:	3001      	adds	r0, #1
 80040f0:	d103      	bne.n	80040fa <_printf_common+0xb6>
 80040f2:	f04f 30ff 	mov.w	r0, #4294967295
 80040f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040fa:	3501      	adds	r5, #1
 80040fc:	e7c1      	b.n	8004082 <_printf_common+0x3e>
 80040fe:	2030      	movs	r0, #48	; 0x30
 8004100:	18e1      	adds	r1, r4, r3
 8004102:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800410c:	4422      	add	r2, r4
 800410e:	3302      	adds	r3, #2
 8004110:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004114:	e7c2      	b.n	800409c <_printf_common+0x58>
 8004116:	2301      	movs	r3, #1
 8004118:	4622      	mov	r2, r4
 800411a:	4649      	mov	r1, r9
 800411c:	4638      	mov	r0, r7
 800411e:	47c0      	blx	r8
 8004120:	3001      	adds	r0, #1
 8004122:	d0e6      	beq.n	80040f2 <_printf_common+0xae>
 8004124:	3601      	adds	r6, #1
 8004126:	e7d9      	b.n	80040dc <_printf_common+0x98>

08004128 <_printf_i>:
 8004128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800412c:	7e0f      	ldrb	r7, [r1, #24]
 800412e:	4691      	mov	r9, r2
 8004130:	2f78      	cmp	r7, #120	; 0x78
 8004132:	4680      	mov	r8, r0
 8004134:	460c      	mov	r4, r1
 8004136:	469a      	mov	sl, r3
 8004138:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800413a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800413e:	d807      	bhi.n	8004150 <_printf_i+0x28>
 8004140:	2f62      	cmp	r7, #98	; 0x62
 8004142:	d80a      	bhi.n	800415a <_printf_i+0x32>
 8004144:	2f00      	cmp	r7, #0
 8004146:	f000 80d5 	beq.w	80042f4 <_printf_i+0x1cc>
 800414a:	2f58      	cmp	r7, #88	; 0x58
 800414c:	f000 80c1 	beq.w	80042d2 <_printf_i+0x1aa>
 8004150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004154:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004158:	e03a      	b.n	80041d0 <_printf_i+0xa8>
 800415a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800415e:	2b15      	cmp	r3, #21
 8004160:	d8f6      	bhi.n	8004150 <_printf_i+0x28>
 8004162:	a101      	add	r1, pc, #4	; (adr r1, 8004168 <_printf_i+0x40>)
 8004164:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004168:	080041c1 	.word	0x080041c1
 800416c:	080041d5 	.word	0x080041d5
 8004170:	08004151 	.word	0x08004151
 8004174:	08004151 	.word	0x08004151
 8004178:	08004151 	.word	0x08004151
 800417c:	08004151 	.word	0x08004151
 8004180:	080041d5 	.word	0x080041d5
 8004184:	08004151 	.word	0x08004151
 8004188:	08004151 	.word	0x08004151
 800418c:	08004151 	.word	0x08004151
 8004190:	08004151 	.word	0x08004151
 8004194:	080042db 	.word	0x080042db
 8004198:	08004201 	.word	0x08004201
 800419c:	08004295 	.word	0x08004295
 80041a0:	08004151 	.word	0x08004151
 80041a4:	08004151 	.word	0x08004151
 80041a8:	080042fd 	.word	0x080042fd
 80041ac:	08004151 	.word	0x08004151
 80041b0:	08004201 	.word	0x08004201
 80041b4:	08004151 	.word	0x08004151
 80041b8:	08004151 	.word	0x08004151
 80041bc:	0800429d 	.word	0x0800429d
 80041c0:	682b      	ldr	r3, [r5, #0]
 80041c2:	1d1a      	adds	r2, r3, #4
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	602a      	str	r2, [r5, #0]
 80041c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0a0      	b.n	8004316 <_printf_i+0x1ee>
 80041d4:	6820      	ldr	r0, [r4, #0]
 80041d6:	682b      	ldr	r3, [r5, #0]
 80041d8:	0607      	lsls	r7, r0, #24
 80041da:	f103 0104 	add.w	r1, r3, #4
 80041de:	6029      	str	r1, [r5, #0]
 80041e0:	d501      	bpl.n	80041e6 <_printf_i+0xbe>
 80041e2:	681e      	ldr	r6, [r3, #0]
 80041e4:	e003      	b.n	80041ee <_printf_i+0xc6>
 80041e6:	0646      	lsls	r6, r0, #25
 80041e8:	d5fb      	bpl.n	80041e2 <_printf_i+0xba>
 80041ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80041ee:	2e00      	cmp	r6, #0
 80041f0:	da03      	bge.n	80041fa <_printf_i+0xd2>
 80041f2:	232d      	movs	r3, #45	; 0x2d
 80041f4:	4276      	negs	r6, r6
 80041f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041fa:	230a      	movs	r3, #10
 80041fc:	4859      	ldr	r0, [pc, #356]	; (8004364 <_printf_i+0x23c>)
 80041fe:	e012      	b.n	8004226 <_printf_i+0xfe>
 8004200:	682b      	ldr	r3, [r5, #0]
 8004202:	6820      	ldr	r0, [r4, #0]
 8004204:	1d19      	adds	r1, r3, #4
 8004206:	6029      	str	r1, [r5, #0]
 8004208:	0605      	lsls	r5, r0, #24
 800420a:	d501      	bpl.n	8004210 <_printf_i+0xe8>
 800420c:	681e      	ldr	r6, [r3, #0]
 800420e:	e002      	b.n	8004216 <_printf_i+0xee>
 8004210:	0641      	lsls	r1, r0, #25
 8004212:	d5fb      	bpl.n	800420c <_printf_i+0xe4>
 8004214:	881e      	ldrh	r6, [r3, #0]
 8004216:	2f6f      	cmp	r7, #111	; 0x6f
 8004218:	bf0c      	ite	eq
 800421a:	2308      	moveq	r3, #8
 800421c:	230a      	movne	r3, #10
 800421e:	4851      	ldr	r0, [pc, #324]	; (8004364 <_printf_i+0x23c>)
 8004220:	2100      	movs	r1, #0
 8004222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004226:	6865      	ldr	r5, [r4, #4]
 8004228:	2d00      	cmp	r5, #0
 800422a:	bfa8      	it	ge
 800422c:	6821      	ldrge	r1, [r4, #0]
 800422e:	60a5      	str	r5, [r4, #8]
 8004230:	bfa4      	itt	ge
 8004232:	f021 0104 	bicge.w	r1, r1, #4
 8004236:	6021      	strge	r1, [r4, #0]
 8004238:	b90e      	cbnz	r6, 800423e <_printf_i+0x116>
 800423a:	2d00      	cmp	r5, #0
 800423c:	d04b      	beq.n	80042d6 <_printf_i+0x1ae>
 800423e:	4615      	mov	r5, r2
 8004240:	fbb6 f1f3 	udiv	r1, r6, r3
 8004244:	fb03 6711 	mls	r7, r3, r1, r6
 8004248:	5dc7      	ldrb	r7, [r0, r7]
 800424a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800424e:	4637      	mov	r7, r6
 8004250:	42bb      	cmp	r3, r7
 8004252:	460e      	mov	r6, r1
 8004254:	d9f4      	bls.n	8004240 <_printf_i+0x118>
 8004256:	2b08      	cmp	r3, #8
 8004258:	d10b      	bne.n	8004272 <_printf_i+0x14a>
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	07de      	lsls	r6, r3, #31
 800425e:	d508      	bpl.n	8004272 <_printf_i+0x14a>
 8004260:	6923      	ldr	r3, [r4, #16]
 8004262:	6861      	ldr	r1, [r4, #4]
 8004264:	4299      	cmp	r1, r3
 8004266:	bfde      	ittt	le
 8004268:	2330      	movle	r3, #48	; 0x30
 800426a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800426e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004272:	1b52      	subs	r2, r2, r5
 8004274:	6122      	str	r2, [r4, #16]
 8004276:	464b      	mov	r3, r9
 8004278:	4621      	mov	r1, r4
 800427a:	4640      	mov	r0, r8
 800427c:	f8cd a000 	str.w	sl, [sp]
 8004280:	aa03      	add	r2, sp, #12
 8004282:	f7ff fedf 	bl	8004044 <_printf_common>
 8004286:	3001      	adds	r0, #1
 8004288:	d14a      	bne.n	8004320 <_printf_i+0x1f8>
 800428a:	f04f 30ff 	mov.w	r0, #4294967295
 800428e:	b004      	add	sp, #16
 8004290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	f043 0320 	orr.w	r3, r3, #32
 800429a:	6023      	str	r3, [r4, #0]
 800429c:	2778      	movs	r7, #120	; 0x78
 800429e:	4832      	ldr	r0, [pc, #200]	; (8004368 <_printf_i+0x240>)
 80042a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	6829      	ldr	r1, [r5, #0]
 80042a8:	061f      	lsls	r7, r3, #24
 80042aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80042ae:	d402      	bmi.n	80042b6 <_printf_i+0x18e>
 80042b0:	065f      	lsls	r7, r3, #25
 80042b2:	bf48      	it	mi
 80042b4:	b2b6      	uxthmi	r6, r6
 80042b6:	07df      	lsls	r7, r3, #31
 80042b8:	bf48      	it	mi
 80042ba:	f043 0320 	orrmi.w	r3, r3, #32
 80042be:	6029      	str	r1, [r5, #0]
 80042c0:	bf48      	it	mi
 80042c2:	6023      	strmi	r3, [r4, #0]
 80042c4:	b91e      	cbnz	r6, 80042ce <_printf_i+0x1a6>
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	f023 0320 	bic.w	r3, r3, #32
 80042cc:	6023      	str	r3, [r4, #0]
 80042ce:	2310      	movs	r3, #16
 80042d0:	e7a6      	b.n	8004220 <_printf_i+0xf8>
 80042d2:	4824      	ldr	r0, [pc, #144]	; (8004364 <_printf_i+0x23c>)
 80042d4:	e7e4      	b.n	80042a0 <_printf_i+0x178>
 80042d6:	4615      	mov	r5, r2
 80042d8:	e7bd      	b.n	8004256 <_printf_i+0x12e>
 80042da:	682b      	ldr	r3, [r5, #0]
 80042dc:	6826      	ldr	r6, [r4, #0]
 80042de:	1d18      	adds	r0, r3, #4
 80042e0:	6961      	ldr	r1, [r4, #20]
 80042e2:	6028      	str	r0, [r5, #0]
 80042e4:	0635      	lsls	r5, r6, #24
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	d501      	bpl.n	80042ee <_printf_i+0x1c6>
 80042ea:	6019      	str	r1, [r3, #0]
 80042ec:	e002      	b.n	80042f4 <_printf_i+0x1cc>
 80042ee:	0670      	lsls	r0, r6, #25
 80042f0:	d5fb      	bpl.n	80042ea <_printf_i+0x1c2>
 80042f2:	8019      	strh	r1, [r3, #0]
 80042f4:	2300      	movs	r3, #0
 80042f6:	4615      	mov	r5, r2
 80042f8:	6123      	str	r3, [r4, #16]
 80042fa:	e7bc      	b.n	8004276 <_printf_i+0x14e>
 80042fc:	682b      	ldr	r3, [r5, #0]
 80042fe:	2100      	movs	r1, #0
 8004300:	1d1a      	adds	r2, r3, #4
 8004302:	602a      	str	r2, [r5, #0]
 8004304:	681d      	ldr	r5, [r3, #0]
 8004306:	6862      	ldr	r2, [r4, #4]
 8004308:	4628      	mov	r0, r5
 800430a:	f000 f849 	bl	80043a0 <memchr>
 800430e:	b108      	cbz	r0, 8004314 <_printf_i+0x1ec>
 8004310:	1b40      	subs	r0, r0, r5
 8004312:	6060      	str	r0, [r4, #4]
 8004314:	6863      	ldr	r3, [r4, #4]
 8004316:	6123      	str	r3, [r4, #16]
 8004318:	2300      	movs	r3, #0
 800431a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800431e:	e7aa      	b.n	8004276 <_printf_i+0x14e>
 8004320:	462a      	mov	r2, r5
 8004322:	4649      	mov	r1, r9
 8004324:	4640      	mov	r0, r8
 8004326:	6923      	ldr	r3, [r4, #16]
 8004328:	47d0      	blx	sl
 800432a:	3001      	adds	r0, #1
 800432c:	d0ad      	beq.n	800428a <_printf_i+0x162>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	079b      	lsls	r3, r3, #30
 8004332:	d413      	bmi.n	800435c <_printf_i+0x234>
 8004334:	68e0      	ldr	r0, [r4, #12]
 8004336:	9b03      	ldr	r3, [sp, #12]
 8004338:	4298      	cmp	r0, r3
 800433a:	bfb8      	it	lt
 800433c:	4618      	movlt	r0, r3
 800433e:	e7a6      	b.n	800428e <_printf_i+0x166>
 8004340:	2301      	movs	r3, #1
 8004342:	4632      	mov	r2, r6
 8004344:	4649      	mov	r1, r9
 8004346:	4640      	mov	r0, r8
 8004348:	47d0      	blx	sl
 800434a:	3001      	adds	r0, #1
 800434c:	d09d      	beq.n	800428a <_printf_i+0x162>
 800434e:	3501      	adds	r5, #1
 8004350:	68e3      	ldr	r3, [r4, #12]
 8004352:	9903      	ldr	r1, [sp, #12]
 8004354:	1a5b      	subs	r3, r3, r1
 8004356:	42ab      	cmp	r3, r5
 8004358:	dcf2      	bgt.n	8004340 <_printf_i+0x218>
 800435a:	e7eb      	b.n	8004334 <_printf_i+0x20c>
 800435c:	2500      	movs	r5, #0
 800435e:	f104 0619 	add.w	r6, r4, #25
 8004362:	e7f5      	b.n	8004350 <_printf_i+0x228>
 8004364:	0800451f 	.word	0x0800451f
 8004368:	08004530 	.word	0x08004530

0800436c <memmove>:
 800436c:	4288      	cmp	r0, r1
 800436e:	b510      	push	{r4, lr}
 8004370:	eb01 0402 	add.w	r4, r1, r2
 8004374:	d902      	bls.n	800437c <memmove+0x10>
 8004376:	4284      	cmp	r4, r0
 8004378:	4623      	mov	r3, r4
 800437a:	d807      	bhi.n	800438c <memmove+0x20>
 800437c:	1e43      	subs	r3, r0, #1
 800437e:	42a1      	cmp	r1, r4
 8004380:	d008      	beq.n	8004394 <memmove+0x28>
 8004382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004386:	f803 2f01 	strb.w	r2, [r3, #1]!
 800438a:	e7f8      	b.n	800437e <memmove+0x12>
 800438c:	4601      	mov	r1, r0
 800438e:	4402      	add	r2, r0
 8004390:	428a      	cmp	r2, r1
 8004392:	d100      	bne.n	8004396 <memmove+0x2a>
 8004394:	bd10      	pop	{r4, pc}
 8004396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800439a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800439e:	e7f7      	b.n	8004390 <memmove+0x24>

080043a0 <memchr>:
 80043a0:	4603      	mov	r3, r0
 80043a2:	b510      	push	{r4, lr}
 80043a4:	b2c9      	uxtb	r1, r1
 80043a6:	4402      	add	r2, r0
 80043a8:	4293      	cmp	r3, r2
 80043aa:	4618      	mov	r0, r3
 80043ac:	d101      	bne.n	80043b2 <memchr+0x12>
 80043ae:	2000      	movs	r0, #0
 80043b0:	e003      	b.n	80043ba <memchr+0x1a>
 80043b2:	7804      	ldrb	r4, [r0, #0]
 80043b4:	3301      	adds	r3, #1
 80043b6:	428c      	cmp	r4, r1
 80043b8:	d1f6      	bne.n	80043a8 <memchr+0x8>
 80043ba:	bd10      	pop	{r4, pc}

080043bc <memcpy>:
 80043bc:	440a      	add	r2, r1
 80043be:	4291      	cmp	r1, r2
 80043c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80043c4:	d100      	bne.n	80043c8 <memcpy+0xc>
 80043c6:	4770      	bx	lr
 80043c8:	b510      	push	{r4, lr}
 80043ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043ce:	4291      	cmp	r1, r2
 80043d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043d4:	d1f9      	bne.n	80043ca <memcpy+0xe>
 80043d6:	bd10      	pop	{r4, pc}

080043d8 <_realloc_r>:
 80043d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043dc:	4680      	mov	r8, r0
 80043de:	4614      	mov	r4, r2
 80043e0:	460e      	mov	r6, r1
 80043e2:	b921      	cbnz	r1, 80043ee <_realloc_r+0x16>
 80043e4:	4611      	mov	r1, r2
 80043e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043ea:	f7ff bb9b 	b.w	8003b24 <_malloc_r>
 80043ee:	b92a      	cbnz	r2, 80043fc <_realloc_r+0x24>
 80043f0:	f7ff fc88 	bl	8003d04 <_free_r>
 80043f4:	4625      	mov	r5, r4
 80043f6:	4628      	mov	r0, r5
 80043f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043fc:	f000 f81b 	bl	8004436 <_malloc_usable_size_r>
 8004400:	4284      	cmp	r4, r0
 8004402:	4607      	mov	r7, r0
 8004404:	d802      	bhi.n	800440c <_realloc_r+0x34>
 8004406:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800440a:	d812      	bhi.n	8004432 <_realloc_r+0x5a>
 800440c:	4621      	mov	r1, r4
 800440e:	4640      	mov	r0, r8
 8004410:	f7ff fb88 	bl	8003b24 <_malloc_r>
 8004414:	4605      	mov	r5, r0
 8004416:	2800      	cmp	r0, #0
 8004418:	d0ed      	beq.n	80043f6 <_realloc_r+0x1e>
 800441a:	42bc      	cmp	r4, r7
 800441c:	4622      	mov	r2, r4
 800441e:	4631      	mov	r1, r6
 8004420:	bf28      	it	cs
 8004422:	463a      	movcs	r2, r7
 8004424:	f7ff ffca 	bl	80043bc <memcpy>
 8004428:	4631      	mov	r1, r6
 800442a:	4640      	mov	r0, r8
 800442c:	f7ff fc6a 	bl	8003d04 <_free_r>
 8004430:	e7e1      	b.n	80043f6 <_realloc_r+0x1e>
 8004432:	4635      	mov	r5, r6
 8004434:	e7df      	b.n	80043f6 <_realloc_r+0x1e>

08004436 <_malloc_usable_size_r>:
 8004436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800443a:	1f18      	subs	r0, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	bfbc      	itt	lt
 8004440:	580b      	ldrlt	r3, [r1, r0]
 8004442:	18c0      	addlt	r0, r0, r3
 8004444:	4770      	bx	lr
	...

08004448 <_init>:
 8004448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444a:	bf00      	nop
 800444c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800444e:	bc08      	pop	{r3}
 8004450:	469e      	mov	lr, r3
 8004452:	4770      	bx	lr

08004454 <_fini>:
 8004454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004456:	bf00      	nop
 8004458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800445a:	bc08      	pop	{r3}
 800445c:	469e      	mov	lr, r3
 800445e:	4770      	bx	lr
